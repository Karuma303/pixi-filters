{"version":3,"file":"ShockwaveFilter.js","sources":["../../src/shockwave/ShockwaveFilter.ts"],"sourcesContent":["import {\r\n    deprecation,\r\n    Filter,\r\n    FilterSystem,\r\n    GlProgram,\r\n    GpuProgram,\r\n    PointData,\r\n    RenderSurface,\r\n    Texture,\r\n} from 'pixi.js';\r\nimport { vertex, wgslVertex } from '../defaults';\r\nimport fragment from './shockwave.frag';\r\nimport source from './shockwave.wgsl';\r\n\r\n/** Options for the ShockwaveFilter constructor. */\r\nexport interface ShockwaveFilterOptions\r\n{\r\n    /**\r\n     * The `x` and `y` center coordinates to change the position of the center of the circle of effect.\r\n     * @default {x:0,y:0}\r\n     */\r\n    center?: PointData;\r\n    /**\r\n     * The speed about the shockwave ripples out. The unit is `pixel-per-second`\r\n     * @default 500\r\n     */\r\n    speed?: number;\r\n    /**\r\n     * The amplitude of the shockwave\r\n     * @default 30\r\n     */\r\n    amplitude?: number;\r\n    /**\r\n     * The wavelength of the shockwave\r\n     * @default 160\r\n     */\r\n    wavelength?: number;\r\n    /**\r\n     * The brightness of the shockwave\r\n     * @default 1\r\n     */\r\n    brightness?: number;\r\n    /**\r\n     * The maximum radius of shockwave. less than `0` means the max is an infinite distance\r\n     * @default -1\r\n     */\r\n    radius?: number;\r\n    /**\r\n     * Sets the elapsed time of the shockwave.\r\n     * @default 0\r\n     */\r\n    time?: number;\r\n}\r\n\r\n/**\r\n * Create a visual wrinkle effect by like a pond or blast wave.<br />\r\n * ![original](../screenshots/original.png)![filter](../screenshots/shockwave.gif)\r\n *\r\n * {@link https://github.com/evanw/glfx.js/blob/master/src/filters/adjust/noise.js original filter}\r\n * @author Vico @vicocotea\r\n */\r\nexport class ShockwaveFilter extends Filter\r\n{\r\n    /** Default shockwave filter options */\r\n    public static readonly DEFAULT_OPTIONS: ShockwaveFilterOptions = {\r\n        /** The `x` and `y` center coordinates to change the position of the center of the circle of effect. */\r\n        center: { x: 0, y: 0 },\r\n        /** The speed about the shockwave ripples out. The unit is `pixel-per-second` */\r\n        speed: 500,\r\n        /** The amplitude of the shockwave */\r\n        amplitude: 30,\r\n        /** The wavelength of the shockwave */\r\n        wavelength: 160,\r\n        /** The brightness of the shockwave */\r\n        brightness: 1,\r\n        /** The maximum radius of shockwave. less than `0` means the max is an infinite distance */\r\n        radius: -1,\r\n    };\r\n\r\n    public uniforms: {\r\n        uTime: number;\r\n        uCenter: PointData;\r\n        uSpeed: number;\r\n        uWave: Float32Array;\r\n    };\r\n\r\n    /** Sets the elapsed time of the shockwave. It could control the current size of shockwave. */\r\n    public time: number;\r\n\r\n    /**\r\n     * @param options - Options for the ShockwaveFilter constructor.\r\n     */\r\n    constructor(options?: ShockwaveFilterOptions);\r\n    /**\r\n     * @deprecated since 6.0.0\r\n     *\r\n     * @param {PIXI.PointData|number[]} [center=[0.5, 0.5]] - See `center` property.\r\n     * @param {object} [options] - The optional parameters of shockwave filter.\r\n     * @param {number} [options.amplitude=0.5] - See `amplitude`` property.\r\n     * @param {number} [options.wavelength=1.0] - See `wavelength` property.\r\n     * @param {number} [options.speed=500.0] - See `speed` property.\r\n     * @param {number} [options.brightness=8] - See `brightness` property.\r\n     * @param {number} [options.radius=4] - See `radius` property.\r\n     * @param {number} [time=0] - See `time` property.\r\n     */\r\n    constructor(center?: PointData | number[], options?: Omit<ShockwaveFilterOptions, 'time' | 'center'>, time?: number);\r\n    /** @ignore */\r\n    // eslint-disable-next-line max-len\r\n    constructor(...args: [ShockwaveFilterOptions?] | [(PointData | number[])?, Omit<ShockwaveFilterOptions, 'time' | 'center'>?, number?])\r\n    {\r\n        let options = args[0] ?? {};\r\n\r\n        if (Array.isArray(options) || ('x' in options && 'y' in options))\r\n        {\r\n            // eslint-disable-next-line max-len\r\n            deprecation('6.0.0', 'ShockwaveFilter constructor params are now options object. See params: { center, speed, amplitude, wavelength, brightness, radius, time }');\r\n\r\n            options = { center: options, ...args[1] } as ShockwaveFilterOptions;\r\n\r\n            if (args[2] !== undefined) options.time = args[2];\r\n        }\r\n\r\n        options = { ...ShockwaveFilter.DEFAULT_OPTIONS, ...options };\r\n\r\n        const gpuProgram = GpuProgram.from({\r\n            vertex: {\r\n                source: wgslVertex,\r\n                entryPoint: 'mainVertex',\r\n            },\r\n            fragment: {\r\n                source,\r\n                entryPoint: 'mainFragment',\r\n            },\r\n        });\r\n\r\n        const glProgram = GlProgram.from({\r\n            vertex,\r\n            fragment,\r\n            name: 'shockwave-filter'\r\n        });\r\n\r\n        super({\r\n            gpuProgram,\r\n            glProgram,\r\n            resources: {\r\n                shockwaveUniforms: {\r\n                    uTime: { value: options.time, type: 'f32' },\r\n                    uCenter: { value: options.center, type: 'vec2<f32>' },\r\n                    uSpeed: { value: options.speed, type: 'f32' },\r\n                    uWave: { value: new Float32Array(4), type: 'vec4<f32>' },\r\n                },\r\n            },\r\n        });\r\n\r\n        this.time = 0;\r\n\r\n        this.uniforms = this.resources.shockwaveUniforms.uniforms;\r\n\r\n        Object.assign(this, options);\r\n    }\r\n\r\n    public override apply(\r\n        filterManager: FilterSystem,\r\n        input: Texture,\r\n        output: RenderSurface,\r\n        clearMode: boolean\r\n    ): void\r\n    {\r\n        // There is no set/get of `time`, for performance.\r\n        // Because in the most real cases, `time` will be changed in ever game tick.\r\n        // Use set/get will take more function-call.\r\n        this.uniforms.uTime = this.time;\r\n        filterManager.applyFilter(this, input, output, clearMode);\r\n    }\r\n\r\n    /**\r\n     * The `x` and `y` center coordinates to change the position of the center of the circle of effect.\r\n     * @default [0,0]\r\n     */\r\n    get center(): PointData { return this.uniforms.uCenter; }\r\n    set center(value: PointData | number[])\r\n    {\r\n        if (Array.isArray(value))\r\n        {\r\n            value = { x: value[0], y: value[1] };\r\n        }\r\n\r\n        this.uniforms.uCenter = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the center of the effect in normalized screen coords on the `x` axis\r\n     * @default 0\r\n     */\r\n    get centerX(): number { return this.uniforms.uCenter.x; }\r\n    set centerX(value: number) { this.uniforms.uCenter.x = value; }\r\n\r\n    /**\r\n     * Sets the center of the effect in normalized screen coords on the `y` axis\r\n     * @default 0\r\n     */\r\n    get centerY(): number { return this.uniforms.uCenter.y; }\r\n    set centerY(value: number) { this.uniforms.uCenter.y = value; }\r\n\r\n    /**\r\n     * The speed about the shockwave ripples out. The unit is `pixel-per-second`\r\n     * @default 500\r\n     */\r\n    get speed(): number { return this.uniforms.uSpeed; }\r\n    set speed(value: number) { this.uniforms.uSpeed = value; }\r\n\r\n    /**\r\n     * The amplitude of the shockwave\r\n     * @default 30\r\n     */\r\n    get amplitude(): number { return this.uniforms.uWave[0]; }\r\n    set amplitude(value: number) { this.uniforms.uWave[0] = value; }\r\n\r\n    /**\r\n     * The wavelength of the shockwave\r\n     * @default 160\r\n     */\r\n    get wavelength(): number { return this.uniforms.uWave[1]; }\r\n    set wavelength(value: number) { this.uniforms.uWave[1] = value; }\r\n\r\n    /**\r\n     * The brightness of the shockwave\r\n     * @default 1\r\n     */\r\n    get brightness(): number { return this.uniforms.uWave[2]; }\r\n    set brightness(value: number) { this.uniforms.uWave[2] = value; }\r\n\r\n    /**\r\n     * The maximum radius of shockwave. less than `0` means the max is an infinite distance\r\n     * @default -1\r\n     */\r\n    get radius(): number { return this.uniforms.uWave[3]; }\r\n    set radius(value: number) { this.uniforms.uWave[3] = value; }\r\n}\r\n"],"names":["Filter","deprecation","GpuProgram","wgslVertex","source","GlProgram","vertex","fragment"],"mappings":"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"}