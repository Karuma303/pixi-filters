var fragment = "precision highp float;\r\nin vec2 vTextureCoord;\r\nout vec4 finalColor;\r\n\r\nuniform sampler2D uTexture;\r\nuniform float uSepia;\r\nuniform vec2 uNoise;\r\nuniform vec3 uScratch;\r\nuniform vec3 uVignetting;\r\nuniform float uSeed;\r\nuniform vec2 uDimensions;\r\n\r\nuniform vec4 uInputSize;\r\n\r\nconst float SQRT_2 = 1.414213;\r\nconst vec3 SEPIA_RGB = vec3(112.0 / 255.0, 66.0 / 255.0, 20.0 / 255.0);\r\n\r\nfloat rand(vec2 co) {\r\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\r\n}\r\n\r\nvec3 Overlay(vec3 src, vec3 dst)\r\n{\r\n    // if (dst <= 0.5) then: 2 * src * dst\r\n    // if (dst > 0.5) then: 1 - 2 * (1 - dst) * (1 - src)\r\n    return vec3((dst.x <= 0.5) ? (2.0 * src.x * dst.x) : (1.0 - 2.0 * (1.0 - dst.x) * (1.0 - src.x)),\r\n                (dst.y <= 0.5) ? (2.0 * src.y * dst.y) : (1.0 - 2.0 * (1.0 - dst.y) * (1.0 - src.y)),\r\n                (dst.z <= 0.5) ? (2.0 * src.z * dst.z) : (1.0 - 2.0 * (1.0 - dst.z) * (1.0 - src.z)));\r\n}\r\n\r\n\r\nvoid main()\r\n{\r\n    finalColor = texture(uTexture, vTextureCoord);\r\n    vec3 color = finalColor.rgb;\r\n\r\n    if (uSepia > 0.0)\r\n    {\r\n        float gray = (color.x + color.y + color.z) / 3.0;\r\n        vec3 grayscale = vec3(gray);\r\n\r\n        color = Overlay(SEPIA_RGB, grayscale);\r\n\r\n        color = grayscale + uSepia * (color - grayscale);\r\n    }\r\n\r\n    vec2 coord = vTextureCoord * uInputSize.xy / uDimensions.xy;\r\n\r\n    float vignette = uVignetting[0];\r\n    float vignetteAlpha = uVignetting[1];\r\n    float vignetteBlur = uVignetting[2];\r\n\r\n    if (vignette > 0.0)\r\n    {\r\n        float outter = SQRT_2 - vignette * SQRT_2;\r\n        vec2 dir = vec2(vec2(0.5, 0.5) - coord);\r\n        dir.y *= uDimensions.y / uDimensions.x;\r\n        float darker = clamp((outter - length(dir) * SQRT_2) / ( 0.00001 + vignetteBlur * SQRT_2), 0.0, 1.0);\r\n        color.rgb *= darker + (1.0 - darker) * (1.0 - vignetteAlpha);\r\n    }\r\n\r\n    float scratch = uScratch[0];\r\n    float scratchDensity = uScratch[1];\r\n    float scratchWidth = uScratch[2];\r\n\r\n    if (scratchDensity > uSeed && scratch != 0.0)\r\n    {\r\n        float phase = uSeed * 256.0;\r\n        float s = mod(floor(phase), 2.0);\r\n        float dist = 1.0 / scratchDensity;\r\n        float d = distance(coord, vec2(uSeed * dist, abs(s - uSeed * dist)));\r\n        if (d < uSeed * 0.6 + 0.4)\r\n        {\r\n            highp float period = scratchDensity * 10.0;\r\n\r\n            float xx = coord.x * period + phase;\r\n            float aa = abs(mod(xx, 0.5) * 4.0);\r\n            float bb = mod(floor(xx / 0.5), 2.0);\r\n            float yy = (1.0 - bb) * aa + bb * (2.0 - aa);\r\n\r\n            float kk = 2.0 * period;\r\n            float dw = scratchWidth / uDimensions.x * (0.75 + uSeed);\r\n            float dh = dw * kk;\r\n\r\n            float tine = (yy - (2.0 - dh));\r\n\r\n            if (tine > 0.0) {\r\n                float _sign = sign(scratch);\r\n\r\n                tine = s * tine / period + scratch + 0.1;\r\n                tine = clamp(tine + 1.0, 0.5 + _sign * 0.5, 1.5 + _sign * 0.5);\r\n\r\n                color.rgb *= tine;\r\n            }\r\n        }\r\n    }\r\n\r\n    float noise = uNoise[0];\r\n    float noiseSize = uNoise[1];\r\n\r\n    if (noise > 0.0 && noiseSize > 0.0)\r\n    {\r\n        vec2 pixelCoord = vTextureCoord.xy * uInputSize.xy;\r\n        pixelCoord.x = floor(pixelCoord.x / noiseSize);\r\n        pixelCoord.y = floor(pixelCoord.y / noiseSize);\r\n        // vec2 d = pixelCoord * noiseSize * vec2(1024.0 + uSeed * 512.0, 1024.0 - uSeed * 512.0);\r\n        // float _noise = snoise(d) * 0.5;\r\n        float _noise = rand(pixelCoord * noiseSize * uSeed) - 0.5;\r\n        color += _noise * noise;\r\n    }\r\n\r\n    finalColor.rgb = color;\r\n}";

export { fragment as default };
//# sourceMappingURL=old-film.mjs.map
