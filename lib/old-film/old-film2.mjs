var source = "struct OldFilmUniforms {\r\n    uSepia: f32,\r\n    uNoise: vec2<f32>,\r\n    uScratch: vec3<f32>,\r\n    uVignetting: vec3<f32>,\r\n    uSeed: f32,\r\n    uDimensions: vec2<f32>,\r\n};\r\n\r\nstruct GlobalFilterUniforms {\r\n  uInputSize:vec4<f32>,\r\n  uInputPixel:vec4<f32>,\r\n  uInputClamp:vec4<f32>,\r\n  uOutputFrame:vec4<f32>,\r\n  uGlobalFrame:vec4<f32>,\r\n  uOutputTexture:vec4<f32>,\r\n};\r\n\r\n@group(0) @binding(0) var<uniform> gfu: GlobalFilterUniforms;\r\n\r\n@group(0) @binding(1) var uTexture: texture_2d<f32>; \r\n@group(0) @binding(2) var uSampler: sampler;\r\n@group(1) @binding(0) var<uniform> oldFilmUniforms : OldFilmUniforms;\r\n\r\n@fragment\r\nfn mainFragment(\r\n  @builtin(position) position: vec4<f32>,\r\n  @location(0) uv : vec2<f32>\r\n) -> @location(0) vec4<f32> {\r\n  var color: vec4<f32> = textureSample(uTexture, uSampler, uv);\r\n\r\n  if (oldFilmUniforms.uSepia > 0.)\r\n  {\r\n    color = vec4<f32>(sepia(color.rgb), color.a);\r\n  }\r\n\r\n  let coord: vec2<f32> = uv * gfu.uInputSize.xy / oldFilmUniforms.uDimensions;\r\n\r\n  if (oldFilmUniforms.uVignetting[0] > 0.)\r\n  {\r\n    color *= vec4<f32>(vec3<f32>(vignette(color.rgb, coord)), color.a);\r\n  }\r\n\r\n  let uScratch = oldFilmUniforms.uScratch; \r\n\r\n  if (uScratch[1] > oldFilmUniforms.uSeed && uScratch[0] != 0.)\r\n  {\r\n    color = vec4<f32>(scratch(color.rgb, coord), color.a);\r\n  }\r\n\r\n  let uNoise = oldFilmUniforms.uNoise;\r\n\r\n  if (uNoise[0] > 0.0 && uNoise[1] > 0.0)\r\n  {\r\n    color += vec4<f32>(vec3<f32>(noise(uv)), color.a);\r\n  }\r\n\r\n  return color;\r\n}\r\n\r\nconst SQRT_2: f32 = 1.414213;\r\nconst SEPIA_RGB: vec3<f32> = vec3<f32>(112.0 / 255.0, 66.0 / 255.0, 20.0 / 255.0);\r\n\r\nfn modulo(x: f32, y: f32) -> f32\r\n{\r\n  return x - y * floor(x/y);\r\n}\r\n\r\nfn rand(co: vec2<f32>) -> f32\r\n{\r\n  return fract(sin(dot(co, vec2<f32>(12.9898, 78.233))) * 43758.5453);\r\n}\r\n\r\nfn overlay(src: vec3<f32>, dst: vec3<f32>) -> vec3<f32>\r\n{\r\n    // if (dst <= 0.5) then: 2 * src * dst\r\n    // if (dst > 0.5) then: 1 - 2 * (1 - dst) * (1 - src)\r\n\r\n    return vec3<f32>(\r\n      select((1.0 - 2.0 * (1.0 - dst.x) * (1.0 - src.x)), (2.0 * src.x * dst.x), (dst.x <= 0.5)), \r\n      select((1.0 - 2.0 * (1.0 - dst.y) * (1.0 - src.y)), (2.0 * src.y * dst.y), (dst.y <= 0.5)),\r\n      select((1.0 - 2.0 * (1.0 - dst.z) * (1.0 - src.z)), (2.0 * src.z * dst.z), (dst.z <= 0.5))\r\n    );\r\n}\r\n\r\nfn sepia(co: vec3<f32>) -> vec3<f32>\r\n{\r\n  let gray: f32 = (co.x + co.y + co.z) / 3.0;\r\n  let grayscale: vec3<f32> = vec3<f32>(gray);\r\n  let color = overlay(SEPIA_RGB, grayscale);\r\n  return grayscale + oldFilmUniforms.uSepia * (color - grayscale);\r\n}\r\n\r\nfn vignette(co: vec3<f32>, coord: vec2<f32>) -> f32\r\n{\r\n  let uVignetting = oldFilmUniforms.uVignetting;\r\n  let uDimensions = oldFilmUniforms.uDimensions;\r\n  \r\n  let outter: f32 = SQRT_2 - uVignetting[0] * SQRT_2;\r\n  var dir: vec2<f32> = vec2<f32>(vec2<f32>(0.5) - coord);\r\n  dir.y *= uDimensions.y / uDimensions.x;\r\n  let darker: f32 = clamp((outter - length(dir) * SQRT_2) / ( 0.00001 + uVignetting[2] * SQRT_2), 0.0, 1.0);\r\n  return darker + (1.0 - darker) * (1.0 - uVignetting[1]);\r\n}\r\n\r\nfn scratch(co: vec3<f32>, coord: vec2<f32>) -> vec3<f32>\r\n{\r\n  var color = co;\r\n  let uScratch = oldFilmUniforms.uScratch;\r\n  let uSeed = oldFilmUniforms.uSeed;\r\n  let uDimensions = oldFilmUniforms.uDimensions;\r\n\r\n  let phase: f32 = uSeed * 256.0;\r\n  let s: f32 = modulo(floor(phase), 2.0);\r\n  let dist: f32 = 1.0 / uScratch[1];\r\n  let d: f32 = distance(coord, vec2<f32>(uSeed * dist, abs(s - uSeed * dist)));\r\n\r\n  if (d < uSeed * 0.6 + 0.4)\r\n  {\r\n    let period: f32 = uScratch[1] * 10.0;\r\n\r\n    let xx: f32 = coord.x * period + phase;\r\n    let aa: f32 = abs(modulo(xx, 0.5) * 4.0);\r\n    let bb: f32 = modulo(floor(xx / 0.5), 2.0);\r\n    let yy: f32 = (1.0 - bb) * aa + bb * (2.0 - aa);\r\n\r\n    let kk: f32 = 2.0 * period;\r\n    let dw: f32 = uScratch[2] / uDimensions.x * (0.75 + uSeed);\r\n    let dh: f32 = dw * kk;\r\n\r\n    var tine: f32 = (yy - (2.0 - dh));\r\n\r\n    if (tine > 0.0) {\r\n        let _sign: f32 = sign(uScratch[0]);\r\n\r\n        tine = s * tine / period + uScratch[0] + 0.1;\r\n        tine = clamp(tine + 1.0, 0.5 + _sign * 0.5, 1.5 + _sign * 0.5);\r\n\r\n        color *= tine;\r\n    }\r\n  }\r\n\r\n  return color;\r\n}\r\n\r\nfn noise(coord: vec2<f32>) -> f32\r\n{\r\n  let uNoise = oldFilmUniforms.uNoise;\r\n  let uSeed = oldFilmUniforms.uSeed;\r\n\r\n  var pixelCoord: vec2<f32> = coord * gfu.uInputSize.xy;\r\n  pixelCoord.x = floor(pixelCoord.x / uNoise[1]);\r\n  pixelCoord.y = floor(pixelCoord.y / uNoise[1]);\r\n  return (rand(pixelCoord * uNoise[1] * uSeed) - 0.5) * uNoise[0];\r\n}";

export { source as default };
//# sourceMappingURL=old-film2.mjs.map
