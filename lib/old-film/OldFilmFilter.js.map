{"version":3,"file":"OldFilmFilter.js","sources":["../../src/old-film/OldFilmFilter.ts"],"sourcesContent":["import { Filter, GlProgram, GpuProgram } from 'pixi.js';\r\nimport { vertex, wgslVertex } from '../defaults';\r\nimport fragment from './old-film.frag';\r\nimport source from './old-film.wgsl';\r\n\r\nimport type { FilterSystem, RenderSurface, Texture } from 'pixi.js';\r\n\r\n/** Options for the OldFilmFilter constructor. */\r\nexport interface OldFilmFilterOptions\r\n{\r\n    /**\r\n     * The amount of saturation of sepia effect,\r\n     * a value of `1` is more saturation and closer to `0` is less, and a value of `0` produces no sepia effect\r\n     * @default 0.3\r\n     */\r\n    sepia?: number;\r\n    /**\r\n     * Opacity/intensity of the noise effect between `0` and `1`\r\n     * @default 0.3\r\n     */\r\n    noise?: number;\r\n    /**\r\n     * The size of the noise particles\r\n     * @default 1\r\n     */\r\n    noiseSize?: number;\r\n    /**\r\n     * How often scratches appear\r\n     * @default 0.5\r\n     */\r\n    scratch?: number;\r\n    /**\r\n     * The density of the number of scratches\r\n     * @default 0.3\r\n     */\r\n    scratchDensity?: number;\r\n    /**\r\n     * The width of the scratches\r\n     * @default 1\r\n     */\r\n    scratchWidth?: number;\r\n    /**\r\n     * The radius of the vignette effect, smaller values produces a smaller vignette\r\n     * @default 0.3\r\n     */\r\n    vignetting?: number;\r\n    /**\r\n     * Amount of opacity on the vignette\r\n     * @default 1\r\n     */\r\n    vignettingAlpha?: number;\r\n    /**\r\n     * Blur intensity of the vignette\r\n     * @default 1\r\n     */\r\n    vignettingBlur?: number;\r\n    /**\r\n     * A seed value to apply to the random noise generation\r\n     * @default 0\r\n     */\r\n    seed?: number;\r\n}\r\n\r\n/**\r\n * The OldFilmFilter applies a Old film effect to an object.<br>\r\n * ![original](../screenshots/original.png)![filter](../screenshots/old-film.gif)\r\n *\r\n * @class\r\n * @extends Filter\r\n */\r\nexport class OldFilmFilter extends Filter\r\n{\r\n    /** Default values for options. */\r\n    public static readonly DEFAULT_OPTIONS: OldFilmFilterOptions = {\r\n        sepia: 0.3,\r\n        noise: 0.3,\r\n        noiseSize: 1,\r\n        scratch: 0.5,\r\n        scratchDensity: 0.3,\r\n        scratchWidth: 1,\r\n        vignetting: 0.3,\r\n        vignettingAlpha: 1,\r\n        vignettingBlur: 0.3,\r\n        seed: 0\r\n    };\r\n\r\n    public uniforms: {\r\n        uSepia: number;\r\n        uNoise: Float32Array;\r\n        uScratch: Float32Array;\r\n        uVignetting: Float32Array;\r\n        uSeed: number;\r\n        uDimensions: Float32Array;\r\n    };\r\n\r\n    /**\r\n     * A seed value to apply to the random noise generation\r\n     * @default 0\r\n     */\r\n    public seed!: number;\r\n\r\n    /**\r\n     * @param options - Options for the OldFilmFilter constructor.\r\n     */\r\n    constructor(options?: OldFilmFilterOptions)\r\n    {\r\n        options = { ...OldFilmFilter.DEFAULT_OPTIONS, ...options };\r\n\r\n        const gpuProgram = GpuProgram.from({\r\n            vertex: {\r\n                source: wgslVertex,\r\n                entryPoint: 'mainVertex',\r\n            },\r\n            fragment: {\r\n                source,\r\n                entryPoint: 'mainFragment',\r\n            },\r\n        });\r\n\r\n        const glProgram = GlProgram.from({\r\n            vertex,\r\n            fragment,\r\n            name: 'old-film-filter',\r\n        });\r\n\r\n        super({\r\n            gpuProgram,\r\n            glProgram,\r\n            resources: {\r\n                oldFilmUniforms: {\r\n                    uSepia: { value: options.sepia, type: 'f32' },\r\n                    uNoise: { value: new Float32Array(2), type: 'vec2<f32>' },\r\n                    uScratch: { value: new Float32Array(3), type: 'vec3<f32>' },\r\n                    uVignetting: { value: new Float32Array(3), type: 'vec3<f32>' },\r\n                    uSeed: { value: options.seed, type: 'f32' },\r\n                    uDimensions: { value: new Float32Array(2), type: 'vec2<f32>' },\r\n                }\r\n            },\r\n        });\r\n\r\n        this.uniforms = this.resources.oldFilmUniforms.uniforms;\r\n\r\n        Object.assign(this, options);\r\n    }\r\n\r\n    /**\r\n     * Override existing apply method in `Filter`\r\n     * @override\r\n     * @ignore\r\n     */\r\n    public override apply(\r\n        filterManager: FilterSystem,\r\n        input: Texture,\r\n        output: RenderSurface,\r\n        clearMode: boolean\r\n    ): void\r\n    {\r\n        this.uniforms.uDimensions[0] = input.frame.width;\r\n        this.uniforms.uDimensions[1] = input.frame.height;\r\n        this.uniforms.uSeed = this.seed;\r\n\r\n        filterManager.applyFilter(this, input, output, clearMode);\r\n    }\r\n\r\n    /**\r\n     * The amount of saturation of sepia effect,\r\n     * a value of `1` is more saturation and closer to `0` is less, and a value of `0` produces no sepia effect\r\n     * @default 0.3\r\n     */\r\n    get sepia(): number { return this.uniforms.uSepia; }\r\n    set sepia(value: number) { this.uniforms.uSepia = value; }\r\n\r\n    /**\r\n     * Opacity/intensity of the noise effect between `0` and `1`\r\n     * @default 0.3\r\n     */\r\n    get noise(): number { return this.uniforms.uNoise[0]; }\r\n    set noise(value: number) { this.uniforms.uNoise[0] = value; }\r\n\r\n    /**\r\n     * The size of the noise particles\r\n     * @default 1\r\n     */\r\n    get noiseSize(): number { return this.uniforms.uNoise[1]; }\r\n    set noiseSize(value: number) { this.uniforms.uNoise[1] = value; }\r\n\r\n    /**\r\n     * How often scratches appear\r\n     * @default 0.5\r\n     */\r\n    get scratch(): number { return this.uniforms.uScratch[0]; }\r\n    set scratch(value: number) { this.uniforms.uScratch[0] = value; }\r\n\r\n    /**\r\n     * The density of the number of scratches\r\n     * @default 0.3\r\n     */\r\n    get scratchDensity(): number { return this.uniforms.uScratch[1]; }\r\n    set scratchDensity(value: number) { this.uniforms.uScratch[1] = value; }\r\n\r\n    /**\r\n     * The width of the scratches\r\n     * @default 1\r\n     */\r\n    get scratchWidth(): number { return this.uniforms.uScratch[2]; }\r\n    set scratchWidth(value: number) { this.uniforms.uScratch[2] = value; }\r\n\r\n    /**\r\n     * The radius of the vignette effect, smaller values produces a smaller vignette\r\n     * @default 0.3\r\n     */\r\n    get vignetting(): number { return this.uniforms.uVignetting[0]; }\r\n    set vignetting(value: number) { this.uniforms.uVignetting[0] = value; }\r\n\r\n    /**\r\n     * Amount of opacity on the vignette\r\n     * @default 1\r\n     */\r\n    get vignettingAlpha(): number { return this.uniforms.uVignetting[1]; }\r\n    set vignettingAlpha(value: number) { this.uniforms.uVignetting[1] = value; }\r\n\r\n    /**\r\n     * Blur intensity of the vignette\r\n     * @default 1\r\n     */\r\n    get vignettingBlur(): number { return this.uniforms.uVignetting[2]; }\r\n    set vignettingBlur(value: number) { this.uniforms.uVignetting[2] = value; }\r\n}\r\n"],"names":["Filter","GpuProgram","wgslVertex","source","GlProgram","vertex","fragment"],"mappings":"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"}