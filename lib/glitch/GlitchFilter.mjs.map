{"version":3,"file":"GlitchFilter.mjs","sources":["../../src/glitch/GlitchFilter.ts"],"sourcesContent":["import { DEG_TO_RAD, Filter, GlProgram, GpuProgram, ImageSource, Texture } from 'pixi.js';\r\nimport { vertex, wgslVertex } from '../defaults';\r\nimport fragment from './glitch.frag';\r\nimport source from './glitch.wgsl';\r\n\r\nimport type { FilterSystem, PointData, RenderSurface } from 'pixi.js';\r\n\r\nenum FILL_MODES\r\n    {\r\n    TRANSPARENT = 0,\r\n    ORIGINAL = 1,\r\n    LOOP = 2,\r\n    CLAMP = 3,\r\n    MIRROR = 4,\r\n}\r\n\r\n/** Options for the GlitchFilter constructor. */\r\nexport interface GlitchFilterOptions\r\n{\r\n    /**\r\n     * The count of glitch slices.\r\n     * @default 5\r\n     */\r\n    slices?: number;\r\n    /**\r\n     * The maximum offset amount of slices.\r\n     * @default 100\r\n     */\r\n    offset?: number;\r\n    /**\r\n     * The angle in degree of the offset of slices.\r\n     * @default 0\r\n     */\r\n    direction?: number;\r\n    /**\r\n     * The fill mode of the space after the offset.\r\n     * @default FILL_MODES.TRANSPARENT\r\n     */\r\n    fillMode?: number;\r\n    /**\r\n     * A seed value for randomizing glitch effect.\r\n     * @default 0\r\n     */\r\n    seed?: number;\r\n    /**\r\n     * `true` will divide the bands roughly based on equal amounts\r\n     * where as setting to `false` will vary the band sizes dramatically (more random looking).\r\n     * @default false\r\n     */\r\n    average?: boolean;\r\n    /**\r\n     * Minimum size of slices as a portion of the `sampleSize`\r\n     * @default 8\r\n     */\r\n    minSize?: number;\r\n    /**\r\n     * Height of the displacement map canvas.\r\n     * @default 512\r\n     */\r\n    sampleSize?: number;\r\n    /**\r\n     * Red channel offset.\r\n     * @default {x:0,y:0}\r\n     */\r\n    red?: PointData | number[];\r\n    /**\r\n     * Green channel offset.\r\n     * @default {x:0,y:0}\r\n     */\r\n    green?: PointData | number[];\r\n    /**\r\n     * Blue offset.\r\n     * @default {x:0,y:0}\r\n     */\r\n    blue?: PointData | number[];\r\n}\r\n\r\n/**\r\n * The GlitchFilter applies a glitch effect to an object.<br>\r\n * ![original](../screenshots/original.png)![filter](../screenshots/glitch.png)\r\n *\r\n * @class\r\n * @extends Filter\r\n */\r\nexport class GlitchFilter extends Filter\r\n{\r\n    /** Default constructor options. */\r\n    public static readonly defaults: GlitchFilterOptions = {\r\n        slices: 5,\r\n        offset: 100,\r\n        direction: 0,\r\n        fillMode: 0,\r\n        average: false,\r\n        seed: 0,\r\n        red: { x: 0, y: 0 },\r\n        green: { x: 0, y: 0 },\r\n        blue: { x: 0, y: 0 },\r\n        minSize: 8,\r\n        sampleSize: 512,\r\n    };\r\n\r\n    public uniforms: {\r\n        uSeed: number\r\n        uDimensions: Float32Array,\r\n        uAspect: number,\r\n        uFillMode: number,\r\n        uOffset: number,\r\n        uDirection: number,\r\n        uRed: PointData,\r\n        uGreen: PointData,\r\n        uBlue: PointData,\r\n    };\r\n\r\n    /**\r\n     * `true` will divide the bands roughly based on equal amounts\r\n     * where as setting to `false` will vary the band sizes dramatically (more random looking).\r\n     */\r\n    public average = false;\r\n\r\n    /** Minimum size of slices as a portion of the `sampleSize` */\r\n    public minSize = 8;\r\n\r\n    /** Height of the displacement map canvas. */\r\n    public sampleSize = 512;\r\n\r\n    /** Internally generated canvas. */\r\n    private _canvas: HTMLCanvasElement;\r\n\r\n    /**\r\n     * The displacement map is used to generate the bands.\r\n     * If using your own texture, `slices` will be ignored.\r\n     *\r\n     * @member {Texture}\r\n     * @readonly\r\n     */\r\n    public texture: Texture;\r\n\r\n    /** Internal number of slices */\r\n    private _slices = 0;\r\n\r\n    private _sizes: Float32Array = new Float32Array(1);\r\n    private _offsets: Float32Array = new Float32Array(1);\r\n\r\n    /**\r\n     * @param options - Options for the GlitchFilter constructor.\r\n     */\r\n    constructor(options?: GlitchFilterOptions)\r\n    {\r\n        options = { ...GlitchFilter.defaults, ...options };\r\n\r\n        const gpuProgram = GpuProgram.from({\r\n            vertex: {\r\n                source: wgslVertex,\r\n                entryPoint: 'mainVertex',\r\n            },\r\n            fragment: {\r\n                source,\r\n                entryPoint: 'mainFragment',\r\n            },\r\n        });\r\n\r\n        const glProgram = GlProgram.from({\r\n            vertex,\r\n            fragment,\r\n            name: 'glitch-filter',\r\n        });\r\n\r\n        const canvas = document.createElement('canvas');\r\n\r\n        canvas.width = 4;\r\n        canvas.height = options.sampleSize ?? 512;\r\n\r\n        const texture = new Texture({\r\n            source: new ImageSource({ resource: canvas })\r\n        });\r\n\r\n        super({\r\n            gpuProgram,\r\n            glProgram,\r\n            resources: {\r\n                glitchUniforms: {\r\n                    uSeed: { value: options?.seed ?? 0, type: 'f32' },\r\n                    uDimensions: { value: new Float32Array(2), type: 'vec2<f32>' },\r\n                    uAspect: { value: 1, type: 'f32' },\r\n                    uFillMode: { value: options?.fillMode ?? 0, type: 'f32' },\r\n                    uOffset: { value: options?.offset ?? 100, type: 'f32' },\r\n                    uDirection: { value: options?.direction ?? 0, type: 'f32' },\r\n                    uRed: { value: options.red, type: 'vec2<f32>' },\r\n                    uGreen: { value: options.green, type: 'vec2<f32>' },\r\n                    uBlue: { value: options.blue, type: 'vec2<f32>' },\r\n                },\r\n                uDisplacementMap: texture.source,\r\n                uDisplacementSampler: texture.source.style,\r\n            },\r\n        });\r\n\r\n        this.uniforms = this.resources.glitchUniforms.uniforms;\r\n\r\n        this._canvas = canvas;\r\n        this.texture = texture;\r\n\r\n        Object.assign(this, options);\r\n    }\r\n\r\n    /**\r\n     * Override existing apply method in Filter\r\n     * @private\r\n     */\r\n    apply(\r\n        filterManager: FilterSystem,\r\n        input: Texture,\r\n        output: RenderSurface,\r\n        clearMode: boolean\r\n    ): void\r\n    {\r\n        const { width, height } = input.frame;\r\n\r\n        this.uniforms.uDimensions[0] = width;\r\n        this.uniforms.uDimensions[1] = height;\r\n        this.uniforms.uAspect = height / width;\r\n\r\n        filterManager.applyFilter(this, input, output, clearMode);\r\n    }\r\n\r\n    /**\r\n     * Randomize the slices size (heights).\r\n     *\r\n     * @private\r\n     */\r\n    private _randomizeSizes()\r\n    {\r\n        const arr = this._sizes;\r\n        const last = this._slices - 1;\r\n        const size = this.sampleSize;\r\n        const min = Math.min(this.minSize / size, 0.9 / this._slices);\r\n\r\n        if (this.average)\r\n        {\r\n            const count = this._slices;\r\n            let rest = 1;\r\n\r\n            for (let i = 0; i < last; i++)\r\n            {\r\n                const averageWidth = rest / (count - i);\r\n                const w = Math.max(averageWidth * (1 - (Math.random() * 0.6)), min);\r\n\r\n                arr[i] = w;\r\n                rest -= w;\r\n            }\r\n            arr[last] = rest;\r\n        }\r\n        else\r\n        {\r\n            let rest = 1;\r\n            const ratio = Math.sqrt(1 / this._slices);\r\n\r\n            for (let i = 0; i < last; i++)\r\n            {\r\n                const w = Math.max(ratio * rest * Math.random(), min);\r\n\r\n                arr[i] = w;\r\n                rest -= w;\r\n            }\r\n            arr[last] = rest;\r\n        }\r\n\r\n        this.shuffle();\r\n    }\r\n\r\n    /**\r\n     * Shuffle the sizes of the slices, advanced usage.\r\n     */\r\n    shuffle(): void\r\n    {\r\n        const arr = this._sizes;\r\n        const last = this._slices - 1;\r\n\r\n        // shuffle\r\n        for (let i = last; i > 0; i--)\r\n        {\r\n            const rand = (Math.random() * i) >> 0;\r\n            const temp = arr[i];\r\n\r\n            arr[i] = arr[rand];\r\n            arr[rand] = temp;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Randomize the values for offset from -1 to 1\r\n     *\r\n     * @private\r\n     */\r\n    private _randomizeOffsets(): void\r\n    {\r\n        for (let i = 0; i < this._slices; i++)\r\n        {\r\n            this._offsets[i] = Math.random() * (Math.random() < 0.5 ? -1 : 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Regenerating random size, offsets for slices.\r\n     */\r\n    refresh(): void\r\n    {\r\n        this._randomizeSizes();\r\n        this._randomizeOffsets();\r\n        this.redraw();\r\n    }\r\n\r\n    /**\r\n     * Redraw displacement bitmap texture, advanced usage.\r\n     */\r\n    redraw(): void\r\n    {\r\n        const size = this.sampleSize;\r\n        const texture = this.texture;\r\n        const ctx = this._canvas.getContext('2d') as CanvasRenderingContext2D;\r\n\r\n        ctx.clearRect(0, 0, 8, size);\r\n\r\n        let offset;\r\n        let y = 0;\r\n\r\n        for (let i = 0; i < this._slices; i++)\r\n        {\r\n            offset = Math.floor(this._offsets[i] * 256);\r\n            const height = this._sizes[i] * size;\r\n            const red = offset > 0 ? offset : 0;\r\n            const green = offset < 0 ? -offset : 0;\r\n\r\n            ctx.fillStyle = `rgba(${red}, ${green}, 0, 1)`;\r\n            ctx.fillRect(0, y >> 0, size, height + 1 >> 0);\r\n            y += height;\r\n        }\r\n\r\n        texture.source.update();\r\n    }\r\n\r\n    /**\r\n     * Manually custom slices size (height) of displacement bitmap\r\n     *\r\n     * @member {number[]|Float32Array}\r\n     */\r\n    set sizes(sizes: Float32Array)\r\n    {\r\n        const len = Math.min(this._slices, sizes.length);\r\n\r\n        for (let i = 0; i < len; i++)\r\n        {\r\n            this._sizes[i] = sizes[i];\r\n        }\r\n    }\r\n    get sizes(): Float32Array\r\n    {\r\n        return this._sizes;\r\n    }\r\n\r\n    /**\r\n     * Manually set custom slices offset of displacement bitmap, this is\r\n     * a collection of values from -1 to 1. To change the max offset value\r\n     * set `offset`.\r\n     *\r\n     * @member {number[]|Float32Array}\r\n     */\r\n    set offsets(offsets: Float32Array)\r\n    {\r\n        const len = Math.min(this._slices, offsets.length);\r\n\r\n        for (let i = 0; i < len; i++)\r\n        {\r\n            this._offsets[i] = offsets[i];\r\n        }\r\n    }\r\n    get offsets(): Float32Array { return this._offsets; }\r\n\r\n    /**\r\n     * The count of slices.\r\n     * @default 5\r\n     */\r\n    get slices(): number { return this._slices; }\r\n    set slices(value: number)\r\n    {\r\n        if (this._slices === value) return;\r\n        this._slices = value;\r\n        this._sizes = new Float32Array(value);\r\n        this._offsets = new Float32Array(value);\r\n        this.refresh();\r\n    }\r\n\r\n    /**\r\n     * The maximum offset amount of slices.\r\n     * @default 100\r\n     */\r\n    get offset(): number { return this.uniforms.uOffset; }\r\n    set offset(value: number) { this.uniforms.uOffset = value; }\r\n\r\n    /**\r\n     * A seed value for randomizing glitch effect.\r\n     * @default 0\r\n     */\r\n    get seed(): number { return this.uniforms.uSeed; }\r\n    set seed(value: number) { this.uniforms.uSeed = value; }\r\n\r\n    /**\r\n     * The fill mode of the space after the offset.\r\n     * @default FILL_MODES.TRANSPARENT\r\n     */\r\n    get fillMode(): FILL_MODES { return this.uniforms.uFillMode; }\r\n    set fillMode(value: FILL_MODES) { this.uniforms.uFillMode = value; }\r\n\r\n    /**\r\n     * The angle in degree of the offset of slices.\r\n     * @default 0\r\n     */\r\n    get direction(): number { return this.uniforms.uDirection / DEG_TO_RAD; }\r\n    set direction(value: number) { this.uniforms.uDirection = value * DEG_TO_RAD; }\r\n\r\n    /**\r\n     * Red channel offset.\r\n     * @default {x:0,y:0}\r\n     */\r\n    get red(): PointData { return this.uniforms.uRed; }\r\n    set red(value: PointData | number[])\r\n    {\r\n        if (Array.isArray(value))\r\n        {\r\n            value = { x: value[0], y: value[1] };\r\n        }\r\n\r\n        this.uniforms.uRed = value;\r\n    }\r\n\r\n    /**\r\n     * Green channel offset.\r\n     * @default {x:0,y:0}\r\n     */\r\n    get green(): PointData { return this.uniforms.uGreen; }\r\n    set green(value: PointData | number[])\r\n    {\r\n        if (Array.isArray(value))\r\n        {\r\n            value = { x: value[0], y: value[1] };\r\n        }\r\n\r\n        this.uniforms.uGreen = value;\r\n    }\r\n\r\n    /**\r\n     * Blue offset.\r\n     * @default {x:0,y:0}\r\n     */\r\n    get blue(): PointData { return this.uniforms.uBlue; }\r\n    set blue(value: PointData | number[])\r\n    {\r\n        if (Array.isArray(value))\r\n        {\r\n            value = { x: value[0], y: value[1] };\r\n        }\r\n\r\n        this.uniforms.uBlue = value;\r\n    }\r\n\r\n    /**\r\n     * Removes all references\r\n     */\r\n    destroy(): void\r\n    {\r\n        this.texture?.destroy(true);\r\n        this.texture\r\n        = this._canvas\r\n        = this.red\r\n        = this.green\r\n        = this.blue\r\n        = this._sizes\r\n        = this._offsets = null as any;\r\n    }\r\n}\r\n"],"names":[],"mappings":"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"}