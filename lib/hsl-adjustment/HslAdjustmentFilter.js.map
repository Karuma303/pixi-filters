{"version":3,"file":"HslAdjustmentFilter.js","sources":["../../src/hsl-adjustment/HslAdjustmentFilter.ts"],"sourcesContent":["import { Filter, GlProgram, GpuProgram } from 'pixi.js';\r\nimport { vertex, wgslVertex } from '../defaults';\r\nimport fragment from './hsladjustment.frag';\r\nimport source from './hsladjustment.wgsl';\r\n\r\n/**\r\n * Options for the HslAdjustmentFilter constructor.\r\n */\r\nexport interface HslAdjustmentFilterOptions\r\n{\r\n    /**\r\n     * The amount of hue in degrees (-180 to 180)\r\n     * @default 0\r\n     */\r\n    hue: number;\r\n    /**\r\n     * The amount of color saturation (-1 to 1)\r\n     * @default 0\r\n     */\r\n    saturation: number;\r\n    /**\r\n     * The amount of lightness (-1 to 1)\r\n     * @default 0\r\n     */\r\n    lightness: number;\r\n    /**\r\n     * Whether to colorize the image\r\n     * @default false\r\n     */\r\n    colorize: boolean;\r\n    /**\r\n     * The amount of alpha (0 to 1)\r\n     * @default 1\r\n     */\r\n    alpha: number;\r\n}\r\n\r\n/**\r\n * ![original](../screenshots/original.png)![filter](../screenshots/hsl-adjustment.png)\r\n *\r\n * This WebGPU filter has been ported from the WebGL renderer that was originally created by Viktor Persson (@vikpe)\r\n *\r\n * @class\r\n * @extends Filter\r\n */\r\nexport class HslAdjustmentFilter extends Filter\r\n{\r\n    /** Default values for options. */\r\n    public static readonly DEFAULT_OPTIONS: HslAdjustmentFilterOptions = {\r\n        hue: 0,\r\n        saturation: 0,\r\n        lightness: 0,\r\n        colorize: false,\r\n        alpha: 1,\r\n    };\r\n\r\n    public uniforms: {\r\n        uHsl: Float32Array;\r\n        uColorize: number;\r\n        uAlpha: number;\r\n    };\r\n\r\n    private _hue!: number;\r\n\r\n    /**\r\n     * @param options - Options for the HslAdjustmentFilter constructor.\r\n     */\r\n    constructor(options?: HslAdjustmentFilterOptions)\r\n    {\r\n        options = { ...HslAdjustmentFilter.DEFAULT_OPTIONS, ...options };\r\n\r\n        const gpuProgram = GpuProgram.from({\r\n            vertex: {\r\n                source: wgslVertex,\r\n                entryPoint: 'mainVertex',\r\n            },\r\n            fragment: {\r\n                source,\r\n                entryPoint: 'mainFragment',\r\n            },\r\n        });\r\n\r\n        const glProgram = GlProgram.from({\r\n            vertex,\r\n            fragment,\r\n            name: 'hsl-adjustment-filter',\r\n        });\r\n\r\n        super({\r\n            gpuProgram,\r\n            glProgram,\r\n            resources: {\r\n                hslUniforms: {\r\n                    uHsl: { value: new Float32Array(3), type: 'vec3<f32>' },\r\n                    uColorize: { value: options.colorize ? 1 : 0, type: 'f32' },\r\n                    uAlpha: { value: options.alpha, type: 'f32' },\r\n                },\r\n            },\r\n        });\r\n\r\n        this.uniforms = this.resources.hslUniforms.uniforms;\r\n        this.hue = options.hue;\r\n    }\r\n\r\n    /**\r\n     * The amount of hue in degrees (-180 to 180)\r\n     * @default 0\r\n     */\r\n    get hue(): number { return this._hue; }\r\n    set hue(value: number)\r\n    {\r\n        this._hue = value;\r\n        this.resources.hslUniforms.uniforms.uHsl[0] = value * (Math.PI / 180);\r\n    }\r\n\r\n    /**\r\n     * The amount of lightness (-1 to 1)\r\n     * @default 0\r\n     */\r\n    get saturation(): number { return this.resources.hslUniforms.uniforms.uHsl[1]; }\r\n    set saturation(value: number) { this.resources.hslUniforms.uniforms.uHsl[1] = value; }\r\n\r\n    /**\r\n     * The amount of lightness (-1 to 1)\r\n     * @default 0\r\n     */\r\n    get lightness(): number { return this.resources.hslUniforms.uniforms.uHsl[2]; }\r\n    set lightness(value: number) { this.resources.hslUniforms.uniforms.uHsl[2] = value; }\r\n\r\n    /**\r\n     * Whether to colorize the image\r\n     * @default false\r\n     */\r\n    get colorize(): boolean { return this.resources.hslUniforms.uniforms.uColorize === 1; }\r\n    set colorize(value: boolean) { this.resources.hslUniforms.uniforms.uColorize = value ? 1 : 0; }\r\n\r\n    /**\r\n     * The amount of alpha (0 to 1)\r\n     * @default 1\r\n     */\r\n    get alpha(): number { return this.resources.hslUniforms.uniforms.uAlpha; }\r\n    set alpha(value: number) { this.resources.hslUniforms.uniforms.uAlpha = value; }\r\n}\r\n"],"names":["Filter","GpuProgram","wgslVertex","source","GlProgram","vertex","fragment"],"mappings":"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"}