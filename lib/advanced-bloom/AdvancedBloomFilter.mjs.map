{"version":3,"file":"AdvancedBloomFilter.mjs","sources":["../../src/advanced-bloom/AdvancedBloomFilter.ts"],"sourcesContent":["import {\r\n    Filter,\r\n    FilterSystem,\r\n    GlProgram,\r\n    GpuProgram,\r\n    PointData,\r\n    RenderSurface,\r\n    Texture,\r\n    TexturePool,\r\n} from 'pixi.js';\r\nimport { vertex, wgslVertex } from '../defaults';\r\nimport { KawaseBlurFilter } from '../kawase-blur/KawaseBlurFilter';\r\nimport fragment from './advanced-bloom.frag';\r\nimport source from './advanced-bloom.wgsl';\r\nimport { ExtractBrightnessFilter } from './ExtractBrightnessFilter';\r\n\r\n/** Options for the AdvancedBloomFilter constructor. */\r\nexport interface AdvancedBloomFilterOptions\r\n{\r\n    /**\r\n     * Defines how bright a color needs to be to affect bloom.\r\n     * @default 1\r\n     */\r\n    threshold?: number,\r\n    /**\r\n     * To adjust the strength of the bloom. Higher values is more intense brightness.\r\n     * @default 1\r\n     */\r\n    bloomScale?: number,\r\n    /**\r\n     * The brightness, lower value is more subtle brightness, higher value is blown-out.\r\n     * @default 1\r\n     */\r\n    brightness?: number,\r\n    /** The strength of the Blur properties simultaneously */\r\n    blur?: number,\r\n    /**\r\n     * The kernel size of the blur filter.\r\n     */\r\n    kernels?: number[],\r\n    /** The quality of the Blur filter. */\r\n    quality?: number,\r\n    /**\r\n     * The pixel size of the blur filter. Large size is blurrier. For advanced usage.\r\n     * @default {x:1,y:1}\r\n     */\r\n    pixelSize?: PointData | number[] | number,\r\n}\r\n\r\n/**\r\n * The AdvancedBloomFilter applies a Bloom Effect to an object. Unlike the normal BloomFilter\r\n * this had some advanced controls for adjusting the look of the bloom. Note: this filter\r\n * is slower than normal BloomFilter.<br>\r\n * ![original](../screenshots/original.png)![filter](../screenshots/advanced-bloom.png)\r\n *\r\n * @class\r\n * @extends Filter\r\n */\r\nexport class AdvancedBloomFilter extends Filter\r\n{\r\n    /** Default values for options. */\r\n    public static readonly DEFAULT_OPTIONS: AdvancedBloomFilterOptions = {\r\n        threshold: 0.5,\r\n        bloomScale: 1,\r\n        brightness: 1,\r\n        blur: 8,\r\n        quality: 4,\r\n        pixelSize: { x: 1, y: 1 },\r\n    };\r\n\r\n    public uniforms: {\r\n        uBloomScale: number;\r\n        uBrightness: number;\r\n    };\r\n\r\n    /** To adjust the strength of the bloom. Higher values is more intense brightness. */\r\n    public bloomScale = 1;\r\n\r\n    /** The brightness, lower value is more subtle brightness, higher value is blown-out. */\r\n    public brightness = 1;\r\n\r\n    private _extractFilter: ExtractBrightnessFilter;\r\n    private _blurFilter: KawaseBlurFilter;\r\n\r\n    /**\r\n     * @param options - Options for the AdvancedBloomFilter constructor.\r\n     */\r\n    constructor(options?: AdvancedBloomFilterOptions)\r\n    {\r\n        options = { ...AdvancedBloomFilter.DEFAULT_OPTIONS, ...options };\r\n\r\n        const gpuProgram = GpuProgram.from({\r\n            vertex: {\r\n                source: wgslVertex,\r\n                entryPoint: 'mainVertex',\r\n            },\r\n            fragment: {\r\n                source,\r\n                entryPoint: 'mainFragment',\r\n            },\r\n        });\r\n\r\n        const glProgram = GlProgram.from({\r\n            vertex,\r\n            fragment,\r\n            name: 'advanced-bloom-filter',\r\n        });\r\n\r\n        super({\r\n            gpuProgram,\r\n            glProgram,\r\n            resources: {\r\n                advancedBloomUniforms: {\r\n                    uBloomScale: { value: options.bloomScale, type: 'f32' },\r\n                    uBrightness: { value: options.brightness, type: 'f32' },\r\n                },\r\n                uMapTexture: Texture.WHITE,\r\n            },\r\n        });\r\n\r\n        this.uniforms = this.resources.advancedBloomUniforms.uniforms;\r\n\r\n        this._extractFilter = new ExtractBrightnessFilter({\r\n            threshold: options.threshold\r\n        });\r\n\r\n        this._blurFilter = new KawaseBlurFilter({\r\n            strength: options.kernels as [number, number] ?? options.blur,\r\n            quality: options.kernels ? undefined : options.quality,\r\n        });\r\n\r\n        Object.assign(this, options);\r\n    }\r\n\r\n    /**\r\n     * Override existing apply method in `Filter`\r\n     * @override\r\n     * @ignore\r\n     */\r\n    public override apply(\r\n        filterManager: FilterSystem,\r\n        input: Texture,\r\n        output: RenderSurface,\r\n        clearMode: boolean\r\n    ): void\r\n    {\r\n        const brightTarget = TexturePool.getSameSizeTexture(input);\r\n\r\n        this._extractFilter.apply(filterManager, input, brightTarget, true);\r\n\r\n        const bloomTarget = TexturePool.getSameSizeTexture(input);\r\n\r\n        this._blurFilter.apply(filterManager, brightTarget, bloomTarget, true);\r\n\r\n        this.uniforms.uBloomScale = this.bloomScale;\r\n        this.uniforms.uBrightness = this.brightness;\r\n\r\n        this.resources.uMapTexture = bloomTarget.source;\r\n\r\n        filterManager.applyFilter(this, input, output, clearMode);\r\n\r\n        TexturePool.returnTexture(bloomTarget);\r\n        TexturePool.returnTexture(brightTarget);\r\n    }\r\n\r\n    /**\r\n     * Defines how bright a color needs to be extracted.\r\n     * @default 0.5\r\n     */\r\n    get threshold(): number { return this._extractFilter.threshold; }\r\n    set threshold(value: number) { this._extractFilter.threshold = value; }\r\n\r\n    /** The kernels of the Blur Filter */\r\n    get kernels(): number[] { return this._blurFilter.kernels; }\r\n    set kernels(value: number[]) { this._blurFilter.kernels = value; }\r\n\r\n    /**\r\n     * The strength of the Blur properties simultaneously\r\n     * @default 2\r\n     */\r\n    get blur(): number { return this._blurFilter.strength; }\r\n    set blur(value: number) { this._blurFilter.strength = value; }\r\n\r\n    /**\r\n     * The quality of the Blur Filter\r\n     * @default 4\r\n     */\r\n    get quality(): number { return this._blurFilter.quality; }\r\n    set quality(value: number) { this._blurFilter.quality = value; }\r\n\r\n    /**\r\n     * The pixel size of the Kawase Blur filter\r\n     * @default {x:1,y:1}\r\n     */\r\n    get pixelSize(): PointData { return this._blurFilter.pixelSize; }\r\n    set pixelSize(value: PointData | number[] | number)\r\n    {\r\n        if (typeof value === 'number')\r\n        {\r\n            value = { x: value, y: value };\r\n        }\r\n\r\n        if (Array.isArray(value))\r\n        {\r\n            value = { x: value[0], y: value[1] };\r\n        }\r\n\r\n        this._blurFilter.pixelSize = value;\r\n    }\r\n\r\n    /**\r\n     * The horizontal pixelSize of the Kawase Blur filter\r\n     * @default 1\r\n     */\r\n    get pixelSizeX(): number { return this._blurFilter.pixelSizeX; }\r\n    set pixelSizeX(value: number) { this._blurFilter.pixelSizeX = value; }\r\n\r\n    /**\r\n     * The vertical pixel size of the Kawase Blur filter\r\n     * @default 1\r\n     */\r\n    get pixelSizeY(): number { return this._blurFilter.pixelSizeY; }\r\n    set pixelSizeY(value: number) { this._blurFilter.pixelSizeY = value; }\r\n}\r\n"],"names":[],"mappings":"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"}