{"version":3,"file":"ExtractBrightnessFilter.js","sources":["../../src/advanced-bloom/ExtractBrightnessFilter.ts"],"sourcesContent":["import { Filter, GlProgram, GpuProgram } from 'pixi.js';\r\nimport { vertex, wgslVertex } from '../defaults';\r\nimport fragment from './extract-brightness.frag';\r\nimport source from './extract-brightness.wgsl';\r\n\r\nexport interface ExtractBrightnessFilterOptions\r\n{\r\n    /**\r\n     * Defines how bright a color needs to be extracted.\r\n     */\r\n    threshold?: number;\r\n}\r\n\r\n/**\r\n * Internal filter for retrieving the brightness of the source image.\r\n * @class\r\n * @private\r\n */\r\nexport class ExtractBrightnessFilter extends Filter\r\n{\r\n    /** Default values for options. */\r\n    public static readonly DEFAULT_OPTIONS: ExtractBrightnessFilterOptions = {\r\n        threshold: 0.5\r\n    };\r\n\r\n    public uniforms: {\r\n        uThreshold: number;\r\n    };\r\n\r\n    constructor(options?: ExtractBrightnessFilterOptions)\r\n    {\r\n        options = { ...ExtractBrightnessFilter.DEFAULT_OPTIONS, ...options };\r\n\r\n        const gpuProgram = GpuProgram.from({\r\n            vertex: {\r\n                source: wgslVertex,\r\n                entryPoint: 'mainVertex',\r\n            },\r\n            fragment: {\r\n                source,\r\n                entryPoint: 'mainFragment',\r\n            },\r\n        });\r\n\r\n        const glProgram = GlProgram.from({\r\n            vertex,\r\n            fragment,\r\n            name: 'extract-brightness-filter',\r\n        });\r\n\r\n        super({\r\n            gpuProgram,\r\n            glProgram,\r\n            resources: {\r\n                extractBrightnessUniforms: {\r\n                    uThreshold: { value: options.threshold, type: 'f32' },\r\n                }\r\n            },\r\n        });\r\n\r\n        this.uniforms = this.resources.extractBrightnessUniforms.uniforms;\r\n    }\r\n\r\n    /**\r\n     * Defines how bright a color needs to be extracted.\r\n     * @default 0.5\r\n     */\r\n    get threshold(): number { return this.uniforms.uThreshold; }\r\n    set threshold(value: number) { this.uniforms.uThreshold = value; }\r\n}\r\n"],"names":["Filter","GpuProgram","wgslVertex","source","GlProgram","vertex","fragment"],"mappings":";;;;;;;;;;;;;;;;AAkBO,MAAM,wBAAA,GAAN,MAAM,wBAAA,SAAgCA,cAC7C,CAAA;AAAA,EAUI,YAAY,OACZ,EAAA;AACI,IAAA,OAAA,GAAU,EAAE,GAAG,wBAAwB,CAAA,eAAA,EAAiB,GAAG,OAAQ,EAAA,CAAA;AAEnE,IAAM,MAAA,UAAA,GAAaC,mBAAW,IAAK,CAAA;AAAA,MAC/B,MAAQ,EAAA;AAAA,QACJ,MAAQ,EAAAC,mBAAA;AAAA,QACR,UAAY,EAAA,YAAA;AAAA,OAChB;AAAA,MACA,QAAU,EAAA;AAAA,gBACNC,4BAAA;AAAA,QACA,UAAY,EAAA,cAAA;AAAA,OAChB;AAAA,KACH,CAAA,CAAA;AAED,IAAM,MAAA,SAAA,GAAYC,kBAAU,IAAK,CAAA;AAAA,cAC7BC,qBAAA;AAAA,gBACAC,8BAAA;AAAA,MACA,IAAM,EAAA,2BAAA;AAAA,KACT,CAAA,CAAA;AAED,IAAM,KAAA,CAAA;AAAA,MACF,UAAA;AAAA,MACA,SAAA;AAAA,MACA,SAAW,EAAA;AAAA,QACP,yBAA2B,EAAA;AAAA,UACvB,YAAY,EAAE,KAAA,EAAO,OAAQ,CAAA,SAAA,EAAW,MAAM,KAAM,EAAA;AAAA,SACxD;AAAA,OACJ;AAAA,KACH,CAAA,CAAA;AAjCL,IAAO,aAAA,CAAA,IAAA,EAAA,UAAA,CAAA,CAAA;AAmCH,IAAK,IAAA,CAAA,QAAA,GAAW,IAAK,CAAA,SAAA,CAAU,yBAA0B,CAAA,QAAA,CAAA;AAAA,GAC7D;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,SAAoB,GAAA;AAAE,IAAA,OAAO,KAAK,QAAS,CAAA,UAAA,CAAA;AAAA,GAAY;AAAA,EAC3D,IAAI,UAAU,KAAe,EAAA;AAAE,IAAA,IAAA,CAAK,SAAS,UAAa,GAAA,KAAA,CAAA;AAAA,GAAO;AACrE,CAAA,CAAA;AAAA;AAhDI,aAAA,CAHS,0BAGc,iBAAkD,EAAA;AAAA,EACrE,SAAW,EAAA,GAAA;AACf,CAAA,CAAA,CAAA;AALG,IAAM,uBAAN,GAAA;;;;"}