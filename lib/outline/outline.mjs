var source = "struct OutlineUniforms {\r\n  uThickness:vec2<f32>,\r\n  uColor:vec3<f32>,\r\n  uAlpha:f32,\r\n  uAngleStep:f32,\r\n  uKnockout:f32,\r\n};\r\n\r\nstruct GlobalFilterUniforms {\r\n  uInputSize:vec4<f32>,\r\n  uInputPixel:vec4<f32>,\r\n  uInputClamp:vec4<f32>,\r\n  uOutputFrame:vec4<f32>,\r\n  uGlobalFrame:vec4<f32>,\r\n  uOutputTexture:vec4<f32>,\r\n};\r\n\r\n@group(0) @binding(0) var<uniform> gfu: GlobalFilterUniforms;\r\n\r\n@group(0) @binding(1) var uTexture: texture_2d<f32>; \r\n@group(0) @binding(2) var uSampler: sampler;\r\n@group(1) @binding(0) var<uniform> outlineUniforms : OutlineUniforms;\r\n\r\n@fragment\r\nfn mainFragment(\r\n  @builtin(position) position: vec4<f32>,\r\n  @location(0) uv : vec2<f32>\r\n) -> @location(0) vec4<f32> {\r\n  let sourceColor: vec4<f32> = textureSample(uTexture, uSampler, uv);\r\n  let contentColor: vec4<f32> = sourceColor * (1. - outlineUniforms.uKnockout);\r\n  \r\n  let outlineAlpha: f32 = outlineUniforms.uAlpha * outlineMaxAlphaAtPos(uv) * (1. - sourceColor.a);\r\n  let outlineColor: vec4<f32> = vec4<f32>(vec3<f32>(outlineUniforms.uColor) * outlineAlpha, outlineAlpha);\r\n  \r\n  return contentColor + outlineColor;\r\n}\r\n\r\nfn outlineMaxAlphaAtPos(uv: vec2<f32>) -> f32 {\r\n  let thickness = outlineUniforms.uThickness;\r\n\r\n  if (thickness.x == 0. || thickness.y == 0.) {\r\n    return 0.;\r\n  }\r\n  \r\n  let angleStep = outlineUniforms.uAngleStep;\r\n\r\n  var displacedColor: vec4<f32>;\r\n  var displacedPos: vec2<f32>;\r\n\r\n  var maxAlpha: f32 = 0.;\r\n  var displaced: vec2<f32>;\r\n  var curColor: vec4<f32>;\r\n\r\n  for (var angle = 0.; angle <= DOUBLE_PI; angle += angleStep)\r\n  {\r\n    displaced.x = uv.x + thickness.x * cos(angle);\r\n    displaced.y = uv.y + thickness.y * sin(angle);\r\n    curColor = textureSample(uTexture, uSampler, clamp(displaced, gfu.uInputClamp.xy, gfu.uInputClamp.zw));\r\n    maxAlpha = max(maxAlpha, curColor.a);\r\n  }\r\n\r\n  return maxAlpha;\r\n}\r\n\r\nconst DOUBLE_PI: f32 = 3.14159265358979323846264 * 2.;";

export { source as default };
//# sourceMappingURL=outline.mjs.map
