{"version":3,"file":"OutlineFilter.js","sources":["../../src/outline/OutlineFilter.ts"],"sourcesContent":["import { Color, deprecation, Filter, GlProgram, GpuProgram } from 'pixi.js';\r\nimport { vertex, wgslVertex } from '../defaults';\r\nimport fragment from './outline.frag';\r\nimport source from './outline.wgsl';\r\n\r\nimport type { ColorSource, FilterSystem, RenderSurface, Texture } from 'pixi.js';\r\n\r\n/** Options for the OutlineFilter constructor. */\r\nexport interface OutlineFilterOptions\r\n{\r\n    /**\r\n     * The thickness of the outline\r\n     * @default 1\r\n     */\r\n    thickness?: number;\r\n    /**\r\n     * The color of the outline\r\n     * @example [1.0, 1.0, 1.0] = 0xffffff\r\n     * @default 0x000000\r\n     */\r\n    color?: ColorSource;\r\n    /**\r\n     * The alpha of the outline\r\n     * @default 1\r\n     */\r\n    alpha?: number;\r\n    /**\r\n     * The quality of the outline from `0` to `1`.\r\n     * Using a higher quality setting will result in more accuracy but slower performance\r\n     * @default 0.1\r\n     */\r\n    quality?: number;\r\n    /**\r\n     * Whether to only render outline, not the contents.\r\n     * @default false\r\n     */\r\n    knockout?: boolean;\r\n}\r\n\r\n/**\r\n * OutlineFilter, originally by mishaa\r\n * http://www.html5gamedevs.com/topic/10640-outline-a-sprite-change-certain-colors/?p=69966\r\n * http://codepen.io/mishaa/pen/emGNRB<br>\r\n * ![original](../screenshots/original.png)![filter](../screenshots/outline.png)\r\n *\r\n * @class\r\n * @extends Filter *\r\n * @example\r\n *  someSprite.filters = [new OutlineFilter(2, 0x99ff99)];\r\n */\r\nexport class OutlineFilter extends Filter\r\n{\r\n    /** Default values for options. */\r\n    public static readonly DEFAULT_OPTIONS: OutlineFilterOptions = {\r\n        thickness: 1,\r\n        color: 0x000000,\r\n        alpha: 1,\r\n        quality: 0.1,\r\n        knockout: false,\r\n    };\r\n\r\n    /** The minimum number of samples for rendering outline. */\r\n    public static MIN_SAMPLES = 1;\r\n\r\n    /** The maximum number of samples for rendering outline. */\r\n    public static MAX_SAMPLES = 100;\r\n\r\n    public uniforms: {\r\n        uThickness: Float32Array,\r\n        uColor: Float32Array,\r\n        uAlpha: number;\r\n        uAngleStep: number,\r\n        uKnockout: number,\r\n    };\r\n\r\n    private _thickness!: number;\r\n    private _quality!: number;\r\n    private _color!: Color;\r\n\r\n    /**\r\n     * @param options - Options for the OutlineFilter constructor.\r\n     */\r\n    constructor(options?: OutlineFilterOptions);\r\n    /**\r\n     * @deprecated since 6.0.0\r\n     *\r\n     * @param {number} [thickness=1] - The tickness of the outline. Make it 2 times more for resolution 2\r\n     * @param {number} [color=0x000000] - The color of the outline.\r\n     * @param {number} [quality=0.1] - The quality of the outline from `0` to `1`, using a higher quality\r\n     *        setting will result in slower performance and more accuracy.\r\n     * @param {number} [alpha=1.0] - The alpha of the outline.\r\n     * @param {boolean} [knockout=false] - Only render outline, not the contents.\r\n     */\r\n    constructor(thickness?: number, color?: number, quality?: number, alpha?: number, knockout?: boolean);\r\n    /** @ignore */\r\n    constructor(...args: [OutlineFilterOptions?] | [number?, number?, number?, number?, boolean?])\r\n    {\r\n        let options = args[0] ?? {};\r\n\r\n        if (typeof options === 'number')\r\n        {\r\n            // eslint-disable-next-line max-len\r\n            deprecation('6.0.0', 'OutlineFilter constructor params are now options object. See params: { thickness, color, quality, alpha, knockout }');\r\n\r\n            options = { thickness: options };\r\n\r\n            if (args[1] !== undefined) options.color = args[1];\r\n            if (args[2] !== undefined) options.quality = args[2];\r\n            if (args[3] !== undefined) options.alpha = args[3];\r\n            if (args[4] !== undefined) options.knockout = args[4];\r\n        }\r\n\r\n        options = { ...OutlineFilter.DEFAULT_OPTIONS, ...options };\r\n\r\n        const quality = options.quality ?? 0.1;\r\n\r\n        const gpuProgram = GpuProgram.from({\r\n            vertex: {\r\n                source: wgslVertex,\r\n                entryPoint: 'mainVertex',\r\n            },\r\n            fragment: {\r\n                source,\r\n                entryPoint: 'mainFragment',\r\n            },\r\n        });\r\n\r\n        const glProgram = GlProgram.from({\r\n            vertex,\r\n            fragment: fragment.replace(/\\$\\{ANGLE_STEP\\}/, OutlineFilter.getAngleStep(quality).toFixed(7)),\r\n            name: 'outline-filter',\r\n        });\r\n\r\n        super({\r\n            gpuProgram,\r\n            glProgram,\r\n            resources: {\r\n                outlineUniforms: {\r\n                    uThickness: { value: new Float32Array(2), type: 'vec2<f32>' },\r\n                    uColor: { value: new Float32Array(3), type: 'vec3<f32>' },\r\n                    uAlpha: { value: options.alpha, type: 'f32' },\r\n                    uAngleStep: { value: 0, type: 'f32' },\r\n                    uKnockout: { value: options.knockout ? 1 : 0, type: 'f32' },\r\n                }\r\n            },\r\n        });\r\n\r\n        this.uniforms = this.resources.outlineUniforms.uniforms;\r\n        this.uniforms.uAngleStep = OutlineFilter.getAngleStep(quality);\r\n        this._color = new Color();\r\n        this.color = options.color ?? 0x000000;\r\n\r\n        Object.assign(this, options);\r\n    }\r\n\r\n    /**\r\n     * Override existing apply method in `Filter`\r\n     * @override\r\n     * @ignore\r\n     */\r\n    public override apply(\r\n        filterManager: FilterSystem,\r\n        input: Texture,\r\n        output: RenderSurface,\r\n        clearMode: boolean\r\n    ): void\r\n    {\r\n        this.uniforms.uThickness[0] = this.thickness / input.source.width;\r\n        this.uniforms.uThickness[1] = this.thickness / input.source.height;\r\n\r\n        filterManager.applyFilter(this, input, output, clearMode);\r\n    }\r\n\r\n    /**\r\n     * Get the angleStep by quality\r\n     * @param quality\r\n     */\r\n    private static getAngleStep(quality: number): number\r\n    {\r\n        return parseFloat(((Math.PI * 2) / Math.max(\r\n            quality * OutlineFilter.MAX_SAMPLES,\r\n            OutlineFilter.MIN_SAMPLES,\r\n        )).toFixed(7));\r\n    }\r\n\r\n    /**\r\n     * The thickness of the outline\r\n     * @default 1\r\n     */\r\n    get thickness(): number { return this._thickness; }\r\n    set thickness(value: number) { this._thickness = this.padding = value; }\r\n\r\n    /**\r\n     * The color value of the ambient color\r\n     * @example [1.0, 1.0, 1.0] = 0xffffff\r\n     * @default 0x000000\r\n     */\r\n    get color(): ColorSource { return this._color.value as ColorSource; }\r\n    set color(value: ColorSource)\r\n    {\r\n        this._color.setValue(value);\r\n        const [r, g, b] = this._color.toArray();\r\n\r\n        this.uniforms.uColor[0] = r;\r\n        this.uniforms.uColor[1] = g;\r\n        this.uniforms.uColor[2] = b;\r\n    }\r\n\r\n    /**\r\n     * Coefficient for alpha multiplication\r\n     * @default 1\r\n     */\r\n    get alpha(): number { return this.uniforms.uAlpha; }\r\n    set alpha(value: number) { this.uniforms.uAlpha = value; }\r\n\r\n    /**\r\n     * The quality of the outline from `0` to `1`.\r\n     * Using a higher quality setting will result in more accuracy but slower performance\r\n     * @default 0.1\r\n     */\r\n    get quality(): number { return this._quality; }\r\n    set quality(value: number)\r\n    {\r\n        this._quality = value;\r\n        this.uniforms.uAngleStep = OutlineFilter.getAngleStep(value);\r\n    }\r\n\r\n    /**\r\n     * Whether to only render outline, not the contents.\r\n     * @default false\r\n     */\r\n    get knockout(): boolean { return this.uniforms.uKnockout === 1; }\r\n    set knockout(value: boolean) { this.uniforms.uKnockout = value ? 1 : 0; }\r\n}\r\n"],"names":["Filter","deprecation","GpuProgram","wgslVertex","source","GlProgram","vertex","fragment","Color"],"mappings":"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"}