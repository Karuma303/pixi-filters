var fragment = "precision highp float;\r\nin vec2 vTextureCoord;\r\nout vec4 finalColor;\r\n\r\nuniform sampler2D uTexture;\r\nuniform vec2 uThickness;\r\nuniform vec3 uColor;\r\nuniform float uAlpha;\r\nuniform float uKnockout;\r\n\r\nuniform vec4 uInputClamp;\r\n\r\nconst float DOUBLE_PI = 2. * 3.14159265358979323846264;\r\nconst float ANGLE_STEP = ${ANGLE_STEP};\r\n\r\nfloat outlineMaxAlphaAtPos(vec2 pos) {\r\n    if (uThickness.x == 0. || uThickness.y == 0.) {\r\n        return 0.;\r\n    }\r\n\r\n    vec4 displacedColor;\r\n    vec2 displacedPos;\r\n    float maxAlpha = 0.;\r\n\r\n    for (float angle = 0.; angle <= DOUBLE_PI; angle += ANGLE_STEP) {\r\n        displacedPos.x = vTextureCoord.x + uThickness.x * cos(angle);\r\n        displacedPos.y = vTextureCoord.y + uThickness.y * sin(angle);\r\n        displacedColor = texture(uTexture, clamp(displacedPos, uInputClamp.xy, uInputClamp.zw));\r\n        maxAlpha = max(maxAlpha, displacedColor.a);\r\n    }\r\n\r\n    return maxAlpha;\r\n}\r\n\r\nvoid main(void) {\r\n    vec4 sourceColor = texture(uTexture, vTextureCoord);\r\n    vec4 contentColor = sourceColor * float(uKnockout < 0.5);\r\n    float outlineAlpha = uAlpha * outlineMaxAlphaAtPos(vTextureCoord.xy) * (1.-sourceColor.a);\r\n    vec4 outlineColor = vec4(vec3(uColor) * outlineAlpha, outlineAlpha);\r\n    finalColor = contentColor + outlineColor;\r\n}\r\n";

export { fragment as default };
//# sourceMappingURL=outline2.mjs.map
