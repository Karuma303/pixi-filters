'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var source = "struct TiltShiftUniforms {\r\n  uBlur: vec2<f32>,\r\n  uStart: vec2<f32>,\r\n  uEnd: vec2<f32>,\r\n  uDelta: vec2<f32>,\r\n  uTexSize: vec2<f32>,\r\n};\r\n\r\n@group(0) @binding(1) var uTexture: texture_2d<f32>; \r\n@group(0) @binding(2) var uSampler: sampler;\r\n@group(1) @binding(0) var<uniform> tiltShiftUniforms : TiltShiftUniforms;\r\n\r\n@fragment\r\nfn mainFragment(\r\n  @builtin(position) position: vec4<f32>,\r\n  @location(0) uv : vec2<f32>\r\n) -> @location(0) vec4<f32> {\r\n  let uBlur = tiltShiftUniforms.uBlur[0];\r\n  let uBlurGradient = tiltShiftUniforms.uBlur[1];\r\n  let uStart = tiltShiftUniforms.uStart;\r\n  let uEnd = tiltShiftUniforms.uEnd;\r\n  let uDelta = tiltShiftUniforms.uDelta;\r\n  let uTexSize = tiltShiftUniforms.uTexSize;\r\n\r\n  var color: vec4<f32> = vec4<f32>(0.0);\r\n  var total: f32 = 0.0;\r\n\r\n  let offset: f32 = random(position, vec3<f32>(12.9898, 78.233, 151.7182), 0.0);\r\n  let normal: vec2<f32> = normalize(vec2<f32>(uStart.y - uEnd.y, uEnd.x - uStart.x));\r\n  let radius: f32 = smoothstep(0.0, 1.0, abs(dot(uv * uTexSize - uStart, normal)) / uBlurGradient) * uBlur;\r\n\r\n  for (var t: f32 = -30.0; t <= 30.0; t += 1.0)\r\n  {\r\n    var percent: f32 = (t + offset - 0.5) / 30.0;\r\n    var weight: f32 = 1.0 - abs(percent);\r\n    var sample: vec4<f32> = textureSample(uTexture, uSampler, uv + uDelta / uTexSize * percent * radius);\r\n    sample = vec4<f32>(sample.xyz * sample.a, sample.a); // multiply sample.rgb with sample.a\r\n    color += sample * weight;\r\n    total += weight;\r\n  }\r\n\r\n  color /= total;\r\n  color = vec4<f32>(color.xyz / (color.a + 0.00001), color.a); // divide color.rgb by color.a + 0.00001\r\n\r\n  return color;\r\n}\r\n\r\n\r\nfn random(position: vec4<f32>, scale: vec3<f32>, seed: f32) -> f32\r\n{\r\n  return fract(sin(dot(position.xyz + seed, scale)) * 43758.5453 + seed);\r\n}";

exports["default"] = source;
//# sourceMappingURL=tilt-shift.js.map
