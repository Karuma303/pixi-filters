{"version":3,"file":"TiltShiftAxisFilter.js","sources":["../../src/tilt-shift/TiltShiftAxisFilter.ts"],"sourcesContent":["import { Filter, GlProgram, GpuProgram, PointData } from 'pixi.js';\r\nimport { vertex, wgslVertex } from '../defaults';\r\nimport fragment from './tilt-shift.frag';\r\nimport source from './tilt-shift.wgsl';\r\n\r\n// @author Vico @vicocotea\r\n// original filter https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js\r\n// by Evan Wallace : http://madebyevan.com/\r\n\r\n/**\r\n * Options for creating filter.\r\n */\r\ninterface TiltShiftAxisFilterOptions\r\n{\r\n    /** The strength of the blur. */\r\n    blur?: number;\r\n    /** The strength of the blur gradient */\r\n    gradientBlur?: number;\r\n    /** The position to start the effect at. */\r\n    start?: PointData;\r\n    /** The position to end the effect at. */\r\n    end?: PointData;\r\n    /** The axis that the filter is calculating for. */\r\n    axis?: 'vertical' | 'horizontal';\r\n}\r\n\r\n/**\r\n * A TiltShiftAxisFilter.\r\n *\r\n * @class\r\n * @extends Filter\r\n * @private\r\n */\r\nexport class TiltShiftAxisFilter extends Filter\r\n{\r\n    /** Default values for options. */\r\n    public static readonly DEFAULT_OPTIONS: TiltShiftAxisFilterOptions = {\r\n        /** The strength of the blur. */\r\n        blur: 100,\r\n        /** The strength of the blur gradient */\r\n        gradientBlur: 600,\r\n        /** The position to start the effect at. */\r\n        start: { x: 0, y: 800 },\r\n        /** The position to end the effect at. */\r\n        end: { x: 600, y: 600 },\r\n    };\r\n\r\n    public uniforms: {\r\n        uBlur: Float32Array;\r\n        uStart: PointData\r\n        uEnd: PointData;\r\n        uDelta: Float32Array;\r\n        uTexSize: Float32Array;\r\n    };\r\n\r\n    private _tiltAxis: TiltShiftAxisFilterOptions['axis'];\r\n\r\n    constructor(options?: TiltShiftAxisFilterOptions)\r\n    {\r\n        options = { ...TiltShiftAxisFilter.DEFAULT_OPTIONS, ...options } as TiltShiftAxisFilterOptions;\r\n\r\n        const gpuProgram = GpuProgram.from({\r\n            vertex: {\r\n                source: wgslVertex,\r\n                entryPoint: 'mainVertex',\r\n            },\r\n            fragment: {\r\n                source,\r\n                entryPoint: 'mainFragment',\r\n            },\r\n        });\r\n\r\n        const glProgram = GlProgram.from({\r\n            vertex,\r\n            fragment,\r\n            name: 'tilt-shift-axis-filter',\r\n        });\r\n\r\n        super({\r\n            gpuProgram,\r\n            glProgram,\r\n            resources: {\r\n                tiltShiftUniforms: {\r\n                    uBlur: {\r\n                        value: new Float32Array([\r\n                            options.blur ?? 100,\r\n                            options.gradientBlur ?? 600\r\n                        ]), type: 'vec2<f32>'\r\n                    },\r\n                    uStart: { value: options.start, type: 'vec2<f32>' },\r\n                    uEnd: { value: options.end, type: 'vec2<f32>' },\r\n                    uDelta: { value: new Float32Array([30, 30]), type: 'vec2<f32>' },\r\n                    uTexSize: { value: new Float32Array([window.innerWidth, window.innerHeight]), type: 'vec2<f32>' },\r\n                },\r\n            },\r\n        });\r\n\r\n        this.uniforms = this.resources.tiltShiftUniforms.uniforms;\r\n        this._tiltAxis = options.axis;\r\n        this.updateDelta();\r\n    }\r\n\r\n    /** Updates the filter delta values. */\r\n    protected updateDelta(): void\r\n    {\r\n        this.uniforms.uDelta[0] = 0;\r\n        this.uniforms.uDelta[1] = 0;\r\n\r\n        if (this._tiltAxis === undefined) return;\r\n\r\n        const end = this.uniforms.uEnd;\r\n        const start = this.uniforms.uStart;\r\n\r\n        const dx = end.x - start.x;\r\n        const dy = end.y - start.y;\r\n        const d = Math.sqrt((dx * dx) + (dy * dy));\r\n\r\n        const isVert = this._tiltAxis === 'vertical';\r\n\r\n        this.uniforms.uDelta[0] = !isVert ? dx / d : -dy / d;\r\n        this.uniforms.uDelta[1] = !isVert ? dy / d : dx / d;\r\n    }\r\n\r\n    // /** The strength of the blur. */\r\n    // get blur(): number { return this.uniforms.uBlur[0]; }\r\n    // set blur(value: number) { this.uniforms.uBlur[0] = value; }\r\n\r\n    // /** The strength of the gradient blur. */\r\n    // get gradientBlur(): number { return this.uniforms.uBlur[1]; }\r\n    // set gradientBlur(value: number) { this.uniforms.uBlur[1] = value; }\r\n\r\n    // /** The start position of the effect. */\r\n    // get start(): PointData { return this.uniforms.uStart; }\r\n    // set start(value: PointData)\r\n    // {\r\n    //     this.uniforms.uStart = value;\r\n    //     this.updateDelta();\r\n    // }\r\n\r\n    // /** The start position of the effect on the `x` axis. */\r\n    // get startX(): number { return this.start.x; }\r\n    // set startX(value: number)\r\n    // {\r\n    //     this.start.x = value;\r\n    //     this.updateDelta();\r\n    // }\r\n\r\n    // /** The start position of the effect on the `y` axis. */\r\n    // get startY(): number { return this.startY; }\r\n    // set startY(value: number)\r\n    // {\r\n    //     this.start.y = value;\r\n    //     this.updateDelta();\r\n    // }\r\n\r\n    // /** The end position of the effect. */\r\n    // get end(): PointData { return this.uniforms.uEnd; }\r\n    // set end(value: PointData)\r\n    // {\r\n    //     this.uniforms.uEnd = value;\r\n    //     this.updateDelta();\r\n    // }\r\n\r\n    // /** The end position of the effect on the `x` axis. */\r\n    // get endX(): number { return this.end.x; }\r\n    // set endX(value: number)\r\n    // {\r\n    //     this.end.x = value;\r\n    //     this.updateDelta();\r\n    // }\r\n\r\n    // /** The end position of the effect on the `y` axis. */\r\n    // get endY(): number { return this.end.y; }\r\n    // set endY(value: number)\r\n    // {\r\n    //     this.end.y = value;\r\n    //     this.updateDelta();\r\n    // }\r\n}\r\n"],"names":["Filter","GpuProgram","wgslVertex","source","GlProgram","vertex","fragment"],"mappings":"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"}