'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var fragment = "precision highp float;\r\nin vec2 vTextureCoord;\r\nout vec4 finalColor;\r\n\r\nuniform sampler2D uTexture;\r\nuniform float uSize;\r\nuniform vec3 uColor;\r\nuniform float uReplaceColor;\r\n\r\nuniform vec4 uInputSize;\r\n\r\nvec2 mapCoord( vec2 coord )\r\n{\r\n    coord *= uInputSize.xy;\r\n    coord += uInputSize.zw;\r\n\r\n    return coord;\r\n}\r\n\r\nvec2 unmapCoord( vec2 coord )\r\n{\r\n    coord -= uInputSize.zw;\r\n    coord /= uInputSize.xy;\r\n\r\n    return coord;\r\n}\r\n\r\nvec2 pixelate(vec2 coord, vec2 size)\r\n{\r\n    return floor(coord / size) * size;\r\n}\r\n\r\nvec2 getMod(vec2 coord, vec2 size)\r\n{\r\n    return mod(coord, size) / size;\r\n}\r\n\r\nfloat character(float n, vec2 p)\r\n{\r\n    p = floor(p*vec2(4.0, 4.0) + 2.5);\r\n\r\n    if (clamp(p.x, 0.0, 4.0) == p.x)\r\n    {\r\n        if (clamp(p.y, 0.0, 4.0) == p.y)\r\n        {\r\n            if (int(mod(n/exp2(p.x + 5.0*p.y), 2.0)) == 1) return 1.0;\r\n        }\r\n    }\r\n    return 0.0;\r\n}\r\n\r\nvoid main()\r\n{\r\n    vec2 coord = mapCoord(vTextureCoord);\r\n\r\n    // get the grid position\r\n    vec2 pixCoord = pixelate(coord, vec2(uSize));\r\n    pixCoord = unmapCoord(pixCoord);\r\n\r\n    // sample the color at grid position\r\n    vec4 color = texture(uTexture, pixCoord);\r\n\r\n    // brightness of the color as it's perceived by the human eye\r\n    float gray = 0.3 * color.r + 0.59 * color.g + 0.11 * color.b;\r\n\r\n    // determine the character to use\r\n    float n =  65536.0;             // .\r\n    if (gray > 0.2) n = 65600.0;    // :\r\n    if (gray > 0.3) n = 332772.0;   // *\r\n    if (gray > 0.4) n = 15255086.0; // o\r\n    if (gray > 0.5) n = 23385164.0; // &\r\n    if (gray > 0.6) n = 15252014.0; // 8\r\n    if (gray > 0.7) n = 13199452.0; // @\r\n    if (gray > 0.8) n = 11512810.0; // #\r\n\r\n    // get the mod..\r\n    vec2 modd = getMod(coord, vec2(uSize));\r\n\r\n    finalColor = (uReplaceColor > 0.5 ? vec4(uColor, 1.) : color) * character( n, vec2(-1.0) + modd * 2.0);\r\n}\r\n";

exports["default"] = fragment;
//# sourceMappingURL=ascii2.js.map
