var source = "struct ConvolutionUniforms {\r\n    uMatrix: mat3x3<f32>,\r\n    uTexelSize: vec2<f32>,\r\n};\r\n\r\n@group(0) @binding(1) var uTexture: texture_2d<f32>; \r\n@group(0) @binding(2) var uSampler: sampler;\r\n@group(1) @binding(0) var<uniform> convolutionUniforms : ConvolutionUniforms;\r\n\r\n@fragment\r\nfn mainFragment(\r\n    @location(0) uv: vec2<f32>,\r\n    @builtin(position) position: vec4<f32>\r\n) -> @location(0) vec4<f32> {\r\n    let texelSize = convolutionUniforms.uTexelSize;\r\n    let matrix = convolutionUniforms.uMatrix;\r\n\r\n    let c11: vec4<f32> = textureSample(uTexture, uSampler, uv - texelSize); // top left\r\n    let c12: vec4<f32> = textureSample(uTexture, uSampler, vec2<f32>(uv.x, uv.y - texelSize.y)); // top center\r\n    let c13: vec4<f32> = textureSample(uTexture, uSampler, vec2<f32>(uv.x + texelSize.x, uv.y - texelSize.y)); // top right\r\n\r\n    let c21: vec4<f32> = textureSample(uTexture, uSampler, vec2<f32>(uv.x - texelSize.x, uv.y)); // mid left\r\n    let c22: vec4<f32> = textureSample(uTexture, uSampler, uv); // mid center\r\n    let c23: vec4<f32> = textureSample(uTexture, uSampler, vec2<f32>(uv.x + texelSize.x, uv.y)); // mid right\r\n\r\n    let c31: vec4<f32> = textureSample(uTexture, uSampler, vec2<f32>(uv.x - texelSize.x, uv.y + texelSize.y)); // bottom left\r\n    let c32: vec4<f32> = textureSample(uTexture, uSampler, vec2<f32>(uv.x, uv.y + texelSize.y)); // bottom center\r\n    let c33: vec4<f32> = textureSample(uTexture, uSampler, uv + texelSize); // bottom right\r\n\r\n    var finalColor: vec4<f32> = vec4<f32>(\r\n        c11 * matrix[0][0] + c12 * matrix[0][1] + c13 * matrix[0][2] +\r\n        c21 * matrix[1][0] + c22 * matrix[1][1] + c23 * matrix[1][2] +\r\n        c31 * matrix[2][0] + c32 * matrix[2][1] + c33 * matrix[2][2]\r\n    );\r\n\r\n    finalColor.a = c22.a;\r\n\r\n    return finalColor;\r\n}";

export { source as default };
//# sourceMappingURL=convolution2.mjs.map
