{"version":3,"file":"RGBSplitFilter.mjs","sources":["../../src/rgb-split/RGBSplitFilter.ts"],"sourcesContent":["import { deprecation, Filter, GlProgram, GpuProgram, PointData } from 'pixi.js';\r\nimport { vertex, wgslVertex } from '../defaults';\r\nimport fragment from './rgb-split.frag';\r\nimport source from './rgb-split.wgsl';\r\n\r\ntype OffsetType = PointData | [number, number];\r\n\r\n/** Options for the RGBSplitFilter constructor. */\r\nexport interface RGBSplitFilterOptions\r\n{\r\n    /**\r\n     * The amount of offset for the red channel.\r\n     * @default {x:-10,y:0}\r\n     */\r\n    red?: OffsetType;\r\n    /**\r\n     * The amount of offset for the green channel.\r\n     * @default {x:0,y:10}\r\n     */\r\n    green?: OffsetType;\r\n    /**\r\n     * The amount of offset for the blue channel.\r\n     * @default {x:0,y:0}\r\n     */\r\n    blue?: OffsetType;\r\n}\r\n\r\n/**\r\n * An RGB Split Filter.<br>\r\n * ![original](../screenshots/original.png)![filter](../screenshots/rgb.png)\r\n *\r\n * @class\r\n * @extends Filter\r\n */\r\nexport class RGBSplitFilter extends Filter\r\n{\r\n    /** Default values for options. */\r\n    public static readonly DEFAULT_OPTIONS: RGBSplitFilterOptions = {\r\n        red: { x: -10, y: 0 },\r\n        green: { x: 0, y: 10 },\r\n        blue: { x: 0, y: 0 },\r\n    };\r\n\r\n    public uniforms: {\r\n        uRed: PointData;\r\n        uGreen: PointData;\r\n        uBlue: PointData;\r\n    };\r\n\r\n    /**\r\n     * @param options - Options for the RGBSplitFilter constructor.\r\n     */\r\n    constructor(options?: RGBSplitFilterOptions);\r\n    /**\r\n     * @deprecated since 6.0.0\r\n     *\r\n     * @param {PIXI.PointData | number[]} [red=[-10,0]] - Red channel offset\r\n     * @param {PIXI.PointData | number[]} [green=[0, 10]] - Green channel offset\r\n     * @param {PIXI.PointData | number[]} [blue=[0, 0]] - Blue channel offset\r\n     */\r\n    constructor(red?: OffsetType, green?: OffsetType, blue?: OffsetType);\r\n    /** @ignore */\r\n    constructor(...args: [RGBSplitFilterOptions?] | [OffsetType?, OffsetType?, OffsetType?])\r\n    {\r\n        let options = args[0] ?? {};\r\n\r\n        if (Array.isArray(options) || ('x' in options && 'y' in options))\r\n        {\r\n            // eslint-disable-next-line max-len\r\n            deprecation('6.0.0', 'RGBSplitFilter constructor params are now options object. See params: { red, green, blue }');\r\n\r\n            options = { red: options };\r\n\r\n            if (args[1] !== undefined) options.green = args[1];\r\n            if (args[2] !== undefined) options.blue = args[2];\r\n        }\r\n\r\n        options = { ...RGBSplitFilter.DEFAULT_OPTIONS, ...options };\r\n\r\n        const gpuProgram = GpuProgram.from({\r\n            vertex: {\r\n                source: wgslVertex,\r\n                entryPoint: 'mainVertex',\r\n            },\r\n            fragment: {\r\n                source,\r\n                entryPoint: 'mainFragment',\r\n            },\r\n        });\r\n\r\n        const glProgram = GlProgram.from({\r\n            vertex,\r\n            fragment,\r\n            name: 'rgb-split-filter',\r\n        });\r\n\r\n        super({\r\n            gpuProgram,\r\n            glProgram,\r\n            resources: {\r\n                rgbSplitUniforms: {\r\n                    uRed: { value: options.red, type: 'vec2<f32>' },\r\n                    uGreen: { value: options.green, type: 'vec2<f32>' },\r\n                    uBlue: { value: options.blue, type: 'vec2<f32>' },\r\n                }\r\n            },\r\n        });\r\n\r\n        this.uniforms = this.resources.rgbSplitUniforms.uniforms;\r\n\r\n        Object.assign(this, options);\r\n    }\r\n\r\n    /**\r\n     * Red channel offset.\r\n     * @default {x:-10,y:0}\r\n     */\r\n    get red(): PointData { return this.uniforms.uRed; }\r\n    set red(value: OffsetType)\r\n    {\r\n        if (Array.isArray(value))\r\n        {\r\n            value = { x: value[0], y: value[1] };\r\n        }\r\n\r\n        this.uniforms.uRed = value;\r\n    }\r\n\r\n    /**\r\n     * Amount of x-axis offset for the red channel.\r\n     * @default -10\r\n     */\r\n    get redX(): number { return this.red.x; }\r\n    set redX(value: number) { this.red.x = value; }\r\n\r\n    /**\r\n     * Amount of y-axis offset for the red channel.\r\n     * @default 0\r\n     */\r\n    get redY(): number { return this.red.y; }\r\n    set redY(value: number) { this.red.y = value; }\r\n\r\n    /**\r\n     * Green channel offset.\r\n     * @default {x:0,y:10}\r\n     */\r\n    get green(): PointData { return this.uniforms.uGreen; }\r\n    set green(value: OffsetType)\r\n    {\r\n        if (Array.isArray(value))\r\n        {\r\n            value = { x: value[0], y: value[1] };\r\n        }\r\n\r\n        this.uniforms.uGreen = value;\r\n    }\r\n\r\n    /**\r\n     * Amount of x-axis offset for the green channel.\r\n     * @default 0\r\n     */\r\n    get greenX(): number { return this.green.x; }\r\n    set greenX(value: number) { this.green.x = value; }\r\n\r\n    /**\r\n     * Amount of y-axis offset for the green channel.\r\n     * @default 10\r\n     */\r\n    get greenY(): number { return this.green.y; }\r\n    set greenY(value: number) { this.green.y = value; }\r\n\r\n    /**\r\n     * Blue channel offset.\r\n     * @default {x:0,y:0}\r\n     */\r\n    get blue(): PointData { return this.uniforms.uBlue; }\r\n    set blue(value: OffsetType)\r\n    {\r\n        if (Array.isArray(value))\r\n        {\r\n            value = { x: value[0], y: value[1] };\r\n        }\r\n\r\n        this.uniforms.uBlue = value;\r\n    }\r\n\r\n    /**\r\n     * Amount of x-axis offset for the blue channel.\r\n     * @default 0\r\n     */\r\n    get blueX(): number { return this.blue.x; }\r\n    set blueX(value: number) { this.blue.x = value; }\r\n\r\n    /**\r\n     * Amount of y-axis offset for the blue channel.\r\n     * @default 0\r\n     */\r\n    get blueY(): number { return this.blue.y; }\r\n    set blueY(value: number) { this.blue.y = value; }\r\n}\r\n"],"names":[],"mappings":"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"}