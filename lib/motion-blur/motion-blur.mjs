var fragment = "precision highp float;\r\nin vec2 vTextureCoord;\r\nout vec4 finalColor;\r\n\r\nuniform sampler2D uTexture;\r\nuniform vec2 uVelocity;\r\nuniform int uKernelSize;\r\nuniform float uOffset;\r\n\r\nuniform vec4 uInputSize;\r\n\r\nconst int MAX_KERNEL_SIZE = 2048;\r\n\r\n// Notice:\r\n// the perfect way:\r\n//    int kernelSize = min(uKernelSize, MAX_KERNELSIZE);\r\n// BUT in real use-case , uKernelSize < MAX_KERNELSIZE almost always.\r\n// So use uKernelSize directly.\r\n\r\nvoid main(void)\r\n{\r\n    vec4 color = texture(uTexture, vTextureCoord);\r\n\r\n    if (uKernelSize == 0)\r\n    {\r\n        finalColor = color;\r\n        return;\r\n    }\r\n\r\n    vec2 velocity = uVelocity / uInputSize.xy;\r\n    float offset = -uOffset / length(uVelocity) - 0.5;\r\n    int k = uKernelSize - 1;\r\n\r\n    for(int i = 0; i < MAX_KERNEL_SIZE - 1; i++) {\r\n        if (i == k) {\r\n            break;\r\n        }\r\n        vec2 bias = velocity * (float(i) / float(k) + offset);\r\n        color += texture(uTexture, vTextureCoord + bias);\r\n    }\r\n    finalColor = color / float(uKernelSize);\r\n}\r\n";

export { fragment as default };
//# sourceMappingURL=motion-blur.mjs.map
