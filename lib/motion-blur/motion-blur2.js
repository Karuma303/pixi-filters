'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var source = "struct MotionBlurUniforms {\r\n  uVelocity: vec2<f32>,\r\n  uKernelSize: f32,\r\n  uOffset: f32,\r\n};\r\n\r\nstruct GlobalFilterUniforms {\r\n  uInputSize:vec4<f32>,\r\n  uInputPixel:vec4<f32>,\r\n  uInputClamp:vec4<f32>,\r\n  uOutputFrame:vec4<f32>,\r\n  uGlobalFrame:vec4<f32>,\r\n  uOutputTexture:vec4<f32>,\r\n};\r\n\r\n@group(0) @binding(0) var<uniform> gfu: GlobalFilterUniforms;\r\n\r\n@group(0) @binding(1) var uTexture: texture_2d<f32>; \r\n@group(0) @binding(2) var uSampler: sampler;\r\n@group(1) @binding(0) var<uniform> motionBlurUniforms : MotionBlurUniforms;\r\n\r\n@fragment\r\nfn mainFragment(\r\n  @builtin(position) position: vec4<f32>,\r\n  @location(0) uv : vec2<f32>\r\n) -> @location(0) vec4<f32> {\r\n  let uVelocity = motionBlurUniforms.uVelocity;\r\n  let uKernelSize = motionBlurUniforms.uKernelSize;\r\n  let uOffset = motionBlurUniforms.uOffset;\r\n\r\n  let velocity: vec2<f32> = uVelocity / gfu.uInputSize.xy;\r\n  let offset: f32 = -uOffset / length(uVelocity) - 0.5;\r\n  let k: i32 = i32(min(uKernelSize - 1, MAX_KERNEL_SIZE - 1));\r\n\r\n  var color: vec4<f32> = textureSample(uTexture, uSampler, uv);\r\n\r\n  for(var i: i32 = 0; i < k; i += 1) {\r\n    let bias: vec2<f32> = velocity * (f32(i) / f32(k) + offset);\r\n    color += textureSample(uTexture, uSampler, uv + bias);\r\n  }\r\n  \r\n  return select(color / f32(uKernelSize), textureSample(uTexture, uSampler, uv), uKernelSize == 0);\r\n}\r\n\r\nconst MAX_KERNEL_SIZE: f32 = 2048;";

exports["default"] = source;
//# sourceMappingURL=motion-blur2.js.map
