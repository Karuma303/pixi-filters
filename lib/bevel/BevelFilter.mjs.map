{"version":3,"file":"BevelFilter.mjs","sources":["../../src/bevel/BevelFilter.ts"],"sourcesContent":["import { Color, ColorSource, DEG_TO_RAD, Filter, GlProgram, GpuProgram } from 'pixi.js';\r\nimport { vertex, wgslVertex } from '../defaults';\r\nimport fragment from './bevel.frag';\r\nimport source from './bevel.wgsl';\r\n\r\n/** Options for the BevelFilter constructor. */\r\nexport interface BevelFilterOptions\r\n{\r\n    /**\r\n     * The angle of the light in degrees\r\n     * @default 45\r\n     */\r\n    rotation?: number,\r\n    /**\r\n     * The thickness of the bevel\r\n     * @default 2\r\n     */\r\n    thickness?: number,\r\n    /**\r\n     * The color value of the left & top bevel.\r\n     * @example [1.0, 1.0, 1.0] = 0xffffff\r\n     * @default 0xffffff\r\n     */\r\n    lightColor?: ColorSource,\r\n    /**\r\n     * The alpha value of the left & top bevel.\r\n     * @default 0.7\r\n     */\r\n    lightAlpha?: number,\r\n    /**\r\n     * The color value of the right & bottom bevel.\r\n     * @example [1.0, 1.0, 1.0] = 0xffffff\r\n     * @default 0x000000\r\n     */\r\n    shadowColor?: ColorSource,\r\n    /**\r\n     * The alpha value of the right & bottom bevel.\r\n     * @default 0.7\r\n     */\r\n    shadowAlpha?: number,\r\n}\r\n\r\n/**\r\n * Bevel Filter.<br>\r\n * ![original](../screenshots/original.png)![filter](../screenshots/bevel.png)\r\n *\r\n * @class\r\n * @extends Filter\r\n */\r\nexport class BevelFilter extends Filter\r\n{\r\n    /** Default values for options. */\r\n    public static readonly DEFAULT_OPTIONS: BevelFilterOptions = {\r\n        rotation: 45,\r\n        thickness: 2,\r\n        lightColor: 0xffffff,\r\n        lightAlpha: 0.7,\r\n        shadowColor: 0x000000,\r\n        shadowAlpha: 0.7,\r\n    };\r\n\r\n    public uniforms: {\r\n        uLightColor: Float32Array;\r\n        uLightAlpha: number;\r\n        uShadowColor: Float32Array;\r\n        uShadowAlpha: number;\r\n        uTransform: Float32Array;\r\n    };\r\n\r\n    private _thickness!: number;\r\n    private _rotation!: number;\r\n    private _lightColor: Color;\r\n    private _shadowColor: Color;\r\n\r\n    /**\r\n     * @param options - Options for the BevelFilter constructor.\r\n     */\r\n    constructor(options?: BevelFilterOptions)\r\n    {\r\n        options = { ...BevelFilter.DEFAULT_OPTIONS, ...options };\r\n\r\n        const rotation = (options.rotation ?? 45) * DEG_TO_RAD;\r\n\r\n        const gpuProgram = GpuProgram.from({\r\n            vertex: {\r\n                source: wgslVertex,\r\n                entryPoint: 'mainVertex',\r\n            },\r\n            fragment: {\r\n                source,\r\n                entryPoint: 'mainFragment',\r\n            },\r\n        });\r\n\r\n        const glProgram = GlProgram.from({\r\n            vertex,\r\n            fragment,\r\n            name: 'bevel-filter',\r\n        });\r\n\r\n        super({\r\n            gpuProgram,\r\n            glProgram,\r\n            resources: {\r\n                bevelUniforms: {\r\n                    uLightColor: { value: new Float32Array(3), type: 'vec3<f32>' },\r\n                    uLightAlpha: { value: options.lightAlpha, type: 'f32' },\r\n                    uShadowColor: { value: new Float32Array(3), type: 'vec3<f32>' },\r\n                    uShadowAlpha: { value: options.shadowAlpha, type: 'f32' },\r\n                    uTransform: { value: new Float32Array(2), type: 'vec2<f32>' },\r\n                }\r\n            },\r\n            // Workaround: https://github.com/pixijs/filters/issues/230\r\n            // applies correctly only if there is at least a single-pixel padding with alpha=0 around an image\r\n            // To solve this problem, a padding of 1 put on the filter should suffice\r\n            padding: 1,\r\n        });\r\n\r\n        this.uniforms = this.resources.bevelUniforms.uniforms;\r\n        this._lightColor = new Color();\r\n        this._shadowColor = new Color();\r\n        this.lightColor = options.lightColor ?? 0xffffff;\r\n        this.shadowColor = options.shadowColor ?? 0x000000;\r\n\r\n        Object.assign(this, options, { rotation });\r\n    }\r\n\r\n    /**\r\n     * The angle of the light in degrees\r\n     * @default 45\r\n     */\r\n    get rotation(): number { return this._rotation / DEG_TO_RAD; }\r\n    set rotation(value: number)\r\n    {\r\n        this._rotation = value * DEG_TO_RAD;\r\n        this._updateTransform();\r\n    }\r\n\r\n    /**\r\n     * The thickness of the bevel\r\n     * @default 2\r\n     */\r\n    get thickness(): number { return this._thickness; }\r\n    set thickness(value: number)\r\n    {\r\n        this._thickness = value;\r\n        this._updateTransform();\r\n    }\r\n\r\n    /**\r\n     * The color value of the left & top bevel.\r\n     * @example [1.0, 1.0, 1.0] = 0xffffff\r\n     * @default 0xffffff\r\n     */\r\n    get lightColor(): ColorSource { return this._lightColor.value as ColorSource; }\r\n    set lightColor(value: ColorSource)\r\n    {\r\n        this._lightColor.setValue(value);\r\n        const [r, g, b] = this._lightColor.toArray();\r\n\r\n        this.uniforms.uLightColor[0] = r;\r\n        this.uniforms.uLightColor[1] = g;\r\n        this.uniforms.uLightColor[2] = b;\r\n    }\r\n\r\n    /**\r\n     * The alpha value of the left & top bevel.\r\n     * @default 0.7\r\n     */\r\n    get lightAlpha(): number { return this.uniforms.uLightAlpha; }\r\n    set lightAlpha(value: number) { this.uniforms.uLightAlpha = value; }\r\n\r\n    /**\r\n     * The color value of the right & bottom bevel.\r\n     * @default 0xffffff\r\n     */\r\n    get shadowColor(): ColorSource { return this._shadowColor.value as ColorSource; }\r\n    set shadowColor(value: ColorSource)\r\n    {\r\n        this._shadowColor.setValue(value);\r\n        const [r, g, b] = this._shadowColor.toArray();\r\n\r\n        this.uniforms.uShadowColor[0] = r;\r\n        this.uniforms.uShadowColor[1] = g;\r\n        this.uniforms.uShadowColor[2] = b;\r\n    }\r\n\r\n    /**\r\n     * The alpha value of the right & bottom bevel.\r\n     * @default 0.7\r\n     */\r\n    get shadowAlpha(): number { return this.uniforms.uShadowAlpha; }\r\n    set shadowAlpha(value: number) { this.uniforms.uShadowAlpha = value; }\r\n\r\n    /**\r\n     * Update the transform matrix of offset angle.\r\n     * @private\r\n     */\r\n    private _updateTransform()\r\n    {\r\n        this.uniforms.uTransform[0] = this.thickness * Math.cos(this._rotation);\r\n        this.uniforms.uTransform[1] = this.thickness * Math.sin(this._rotation);\r\n    }\r\n}\r\n"],"names":[],"mappings":"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"}