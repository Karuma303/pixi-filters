var source = "struct BevelUniforms {\r\n  uLightColor: vec3<f32>,\r\n  uLightAlpha: f32,\r\n  uShadowColor: vec3<f32>,\r\n  uShadowAlpha: f32,\r\n  uTransform: vec2<f32>,\r\n};\r\n\r\nstruct GlobalFilterUniforms {\r\n  uInputSize:vec4<f32>,\r\n  uInputPixel:vec4<f32>,\r\n  uInputClamp:vec4<f32>,\r\n  uOutputFrame:vec4<f32>,\r\n  uGlobalFrame:vec4<f32>,\r\n  uOutputTexture:vec4<f32>,\r\n};\r\n\r\n@group(0) @binding(0) var<uniform> gfu: GlobalFilterUniforms;\r\n\r\n@group(0) @binding(1) var uTexture: texture_2d<f32>; \r\n@group(0) @binding(2) var uSampler: sampler;\r\n@group(1) @binding(0) var<uniform> bevelUniforms : BevelUniforms;\r\n\r\n@fragment\r\nfn mainFragment(\r\n  @builtin(position) position: vec4<f32>,\r\n  @location(0) uv : vec2<f32>\r\n) -> @location(0) vec4<f32> {\r\n  let transform = vec2<f32>(1.0 / gfu.uInputSize.xy) * vec2<f32>(bevelUniforms.uTransform.x, bevelUniforms.uTransform.y);\r\n  var color: vec4<f32> = textureSample(uTexture, uSampler, uv);\r\n  let lightSample: f32 = textureSample(uTexture, uSampler, uv - transform).a;\r\n  let shadowSample: f32 = textureSample(uTexture, uSampler, uv + transform).a;\r\n\r\n  let light = vec4<f32>(bevelUniforms.uLightColor, bevelUniforms.uLightAlpha);\r\n  let shadow = vec4<f32>(bevelUniforms.uShadowColor, bevelUniforms.uShadowAlpha);\r\n\r\n  color = vec4<f32>(mix(color.rgb, light.rgb, clamp((color.a - lightSample) * light.a, 0.0, 1.0)), color.a);\r\n  color = vec4<f32>(mix(color.rgb, shadow.rgb, clamp((color.a - shadowSample) * shadow.a, 0.0, 1.0)), color.a);\r\n  \r\n  return vec4<f32>(color.rgb * color.a, color.a);\r\n}";

export { source as default };
//# sourceMappingURL=bevel.mjs.map
