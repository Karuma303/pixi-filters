var fragment = "precision highp float;\r\nin vec2 vTextureCoord;\r\nout vec4 finalColor;\r\n\r\nuniform sampler2D uTexture;\r\nuniform vec2 uStrength;\r\nuniform vec3 uColor;\r\nuniform float uKnockout;\r\nuniform float uAlpha;\r\n\r\nuniform vec4 uInputSize;\r\nuniform vec4 uInputClamp;\r\n\r\nconst float PI = 3.14159265358979323846264;\r\n\r\n// Hard-assignment of DIST and ANGLE_STEP_SIZE instead of using uDistance and uQuality to allow them to be use on GLSL loop conditions\r\nconst float DIST = __DIST__;\r\nconst float ANGLE_STEP_SIZE = min(__ANGLE_STEP_SIZE__, PI * 2.);\r\nconst float ANGLE_STEP_NUM = ceil(PI * 2. / ANGLE_STEP_SIZE);\r\nconst float MAX_TOTAL_ALPHA = ANGLE_STEP_NUM * DIST * (DIST + 1.) / 2.;\r\n\r\nvoid main(void) {\r\n    vec2 px = vec2(1.) / uInputSize.xy;\r\n\r\n    float totalAlpha = 0.;\r\n\r\n    vec2 direction;\r\n    vec2 displaced;\r\n    vec4 curColor;\r\n\r\n    for (float angle = 0.; angle < PI * 2.; angle += ANGLE_STEP_SIZE) {\r\n      direction = vec2(cos(angle), sin(angle)) * px;\r\n\r\n      for (float curDistance = 0.; curDistance < DIST; curDistance++) {\r\n          displaced = clamp(vTextureCoord + direction * (curDistance + 1.), uInputClamp.xy, uInputClamp.zw);\r\n          curColor = texture(uTexture, displaced);\r\n          totalAlpha += (DIST - curDistance) * curColor.a;\r\n      }\r\n    }\r\n    \r\n    curColor = texture(uTexture, vTextureCoord);\r\n\r\n    vec4 glowColor = vec4(uColor, uAlpha);\r\n    bool knockout = uKnockout > .5;\r\n    float innerStrength = uStrength[0];\r\n    float outerStrength = uStrength[1];\r\n\r\n    float alphaRatio = totalAlpha / MAX_TOTAL_ALPHA;\r\n    float innerGlowAlpha = (1. - alphaRatio) * innerStrength * curColor.a * uAlpha;\r\n    float innerGlowStrength = min(1., innerGlowAlpha);\r\n    \r\n    vec4 innerColor = mix(curColor, glowColor, innerGlowStrength);\r\n    float outerGlowAlpha = alphaRatio * outerStrength * (1. - curColor.a) * uAlpha;\r\n    float outerGlowStrength = min(1. - innerColor.a, outerGlowAlpha);\r\n    vec4 outerGlowColor = outerGlowStrength * glowColor.rgba;\r\n\r\n    if (knockout) {\r\n      float resultAlpha = outerGlowAlpha + innerGlowAlpha;\r\n      finalColor = vec4(glowColor.rgb * resultAlpha, resultAlpha);\r\n    }\r\n    else {\r\n      finalColor = innerColor + outerGlowColor;\r\n    }\r\n}\r\n";

export { fragment as default };
//# sourceMappingURL=glow2.mjs.map
