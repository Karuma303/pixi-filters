'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var source = "struct ColorMapUniforms {\r\n  uMix: f32,\r\n  uSize: f32,\r\n  uSliceSize: f32,\r\n  uSlicePixelSize: f32,\r\n  uSliceInnerSize: f32,\r\n};\r\n\r\n@group(0) @binding(1) var uTexture: texture_2d<f32>; \r\n@group(0) @binding(2) var uSampler: sampler;\r\n@group(1) @binding(0) var<uniform> colorMapUniforms : ColorMapUniforms;\r\n@group(1) @binding(1) var uMapTexture: texture_2d<f32>;\r\n@group(1) @binding(2) var uMapSampler: sampler;\r\n\r\n@fragment\r\nfn mainFragment(\r\n  @builtin(position) position: vec4<f32>,\r\n  @location(0) uv : vec2<f32>\r\n) -> @location(0) vec4<f32> {\r\n  var color:vec4<f32> = textureSample(uTexture, uSampler, uv);\r\n\r\n  var adjusted: vec4<f32>;\r\n\r\n  var altColor: vec4<f32> = vec4<f32>(color.rgb / color.a, color.a);\r\n  let innerWidth: f32 = colorMapUniforms.uSize - 1.0;\r\n  let zSlice0: f32 = min(floor(color.b * innerWidth), innerWidth);\r\n  let zSlice1: f32 = min(zSlice0 + 1.0, innerWidth);\r\n  let xOffset: f32 = colorMapUniforms.uSlicePixelSize * 0.5 + color.r * colorMapUniforms.uSliceInnerSize;\r\n  let s0: f32 = xOffset + (zSlice0 * colorMapUniforms.uSliceSize);\r\n  let s1: f32 = xOffset + (zSlice1 * colorMapUniforms.uSliceSize);\r\n  let yOffset: f32 = colorMapUniforms.uSliceSize * 0.5 + color.g * (1.0 - colorMapUniforms.uSliceSize);\r\n  let slice0Color: vec4<f32> = textureSample(uMapTexture, uMapSampler, vec2(s0,yOffset));\r\n  let slice1Color: vec4<f32> = textureSample(uMapTexture, uMapSampler, vec2(s1,yOffset));\r\n  let zOffset: f32 = fract(color.b * innerWidth);\r\n  adjusted = mix(slice0Color, slice1Color, zOffset);\r\n  altColor = vec4<f32>(color.rgb * color.a, color.a);\r\n\r\n  let realColor: vec4<f32> = select(color, altColor, color.a > 0.0);\r\n\r\n  return vec4<f32>(mix(realColor, adjusted, colorMapUniforms.uMix).rgb, realColor.a);\r\n}";

exports["default"] = source;
//# sourceMappingURL=color-map.js.map
