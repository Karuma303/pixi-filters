{"version":3,"file":"RadialBlurFilter.mjs","sources":["../../src/radial-blur/RadialBlurFilter.ts"],"sourcesContent":["import { deprecation, Filter, GlProgram, GpuProgram } from 'pixi.js';\r\nimport { vertex, wgslVertex } from '../defaults';\r\nimport fragment from './radial-blur.frag';\r\nimport source from './radial-blur.wgsl';\r\n\r\nimport type { PointData } from 'pixi.js';\r\n\r\n/** Options for the RadialBlurFilter constructor. */\r\nexport interface RadialBlurFilterOptions\r\n{\r\n    /**\r\n     * Sets the angle of the motion for blur effect\r\n     * @default 0\r\n     */\r\n    angle?: number;\r\n    /**\r\n     * The `x` and `y` offset coordinates to change the position of the center of the circle of effect.\r\n     * This should be a size 2 array or an object containing `x` and `y` values, you cannot change types\r\n     * once defined in the constructor\r\n     * @default {x:0,y:0}\r\n     */\r\n    center?: PointData | number[];\r\n    /**\r\n     * The kernelSize of the blur filter. Must be odd number >= 3\r\n     * @default 5\r\n     */\r\n    kernelSize?: number;\r\n    /**\r\n     * The maximum size of the blur radius, less than `0` equates to infinity\r\n     * @default -1\r\n     */\r\n    radius?: number\r\n}\r\n\r\n/**\r\n * The RadialBlurFilter applies a Motion blur to an object.<br>\r\n * ![original](../screenshots/original.png)![filter](../screenshots/radial-blur.png)\r\n *\r\n * @class\r\n * @extends Filter\r\n */\r\nexport class RadialBlurFilter extends Filter\r\n{\r\n    /** Default values for options. */\r\n    public static readonly DEFAULT_OPTIONS: RadialBlurFilterOptions = {\r\n        angle: 0,\r\n        center: { x: 0, y: 0 },\r\n        kernelSize: 5,\r\n        radius: -1,\r\n    };\r\n\r\n    public uniforms: {\r\n        uRadian: number;\r\n        uCenter: PointData;\r\n        uKernelSize: number;\r\n        uRadius: number;\r\n    };\r\n\r\n    private _angle!: number;\r\n    private _kernelSize!: number;\r\n\r\n    /**\r\n     * @param options - Options for the RadialBlurFilter constructor.\r\n     */\r\n    constructor(options?: RadialBlurFilterOptions);\r\n    /**\r\n     * @deprecated since 6.0.0\r\n     *\r\n     * @param {number} [angle=0] - Sets the angle of the motion for blur effect.\r\n     * @param {PIXI.Point|number[]} [center=[0,0]] - The center of the radial.\r\n     * @param {number} [kernelSize=5] - The kernelSize of the blur filter. Must be odd number >= 3\r\n     * @param {number} [radius=-1] - The maximum size of the blur radius, `-1` is infinite\r\n     */\r\n    constructor(angle?: number, center?: PointData | number[], kernelSize?: number, radius?: number);\r\n    /** @ignore */\r\n    constructor(...args: [RadialBlurFilterOptions?] | [number?, (PointData | number[])?, number?, number?])\r\n    {\r\n        let options = args[0] ?? {};\r\n\r\n        if (typeof options === 'number')\r\n        {\r\n            // eslint-disable-next-line max-len\r\n            deprecation('6.0.0', 'RadialBlurFilter constructor params are now options object. See params: { angle, center, kernelSize, radius }');\r\n\r\n            options = { angle: options };\r\n\r\n            if (args[1])\r\n            {\r\n                const x = 'x' in args[1] ? args[1].x : args[1][0];\r\n                const y = 'y' in args[1] ? args[1].y : args[1][1];\r\n\r\n                options.center = { x, y };\r\n            }\r\n            if (args[2]) options.kernelSize = args[2];\r\n            if (args[3]) options.radius = args[3];\r\n        }\r\n\r\n        options = { ...RadialBlurFilter.DEFAULT_OPTIONS, ...options };\r\n\r\n        const gpuProgram = GpuProgram.from({\r\n            vertex: {\r\n                source: wgslVertex,\r\n                entryPoint: 'mainVertex',\r\n            },\r\n            fragment: {\r\n                source,\r\n                entryPoint: 'mainFragment',\r\n            },\r\n        });\r\n\r\n        const glProgram = GlProgram.from({\r\n            vertex,\r\n            fragment,\r\n            name: 'radial-blur-filter',\r\n        });\r\n\r\n        super({\r\n            gpuProgram,\r\n            glProgram,\r\n            resources: {\r\n                radialBlurUniforms: {\r\n                    uRadian: { value: 0, type: 'f32' },\r\n                    uCenter: { value: options.center, type: 'vec2<f32>' },\r\n                    uKernelSize: { value: options.kernelSize, type: 'i32' },\r\n                    uRadius: { value: options.radius, type: 'f32' },\r\n                }\r\n            },\r\n        });\r\n\r\n        this.uniforms = this.resources.radialBlurUniforms.uniforms;\r\n\r\n        Object.assign(this, options);\r\n    }\r\n\r\n    private _updateKernelSize()\r\n    {\r\n        this.uniforms.uKernelSize = this._angle !== 0 ? this.kernelSize : 0;\r\n    }\r\n\r\n    /**\r\n     * Sets the angle in degrees of the motion for blur effect.\r\n     * @default 0\r\n     */\r\n    get angle(): number { return this._angle; }\r\n    set angle(value: number)\r\n    {\r\n        this._angle = value;\r\n        this.uniforms.uRadian = value * Math.PI / 180;\r\n        this._updateKernelSize();\r\n    }\r\n\r\n    /**\r\n     * The `x` and `y` offset coordinates to change the position of the center of the circle of effect.\r\n     * This should be a size 2 array or an object containing `x` and `y` values, you cannot change types\r\n     * once defined in the constructor\r\n     * @default {x:0,y:0}\r\n     */\r\n    get center(): PointData { return this.uniforms.uCenter; }\r\n    set center(value: PointData | number[])\r\n    {\r\n        if (Array.isArray(value))\r\n        {\r\n            value = { x: value[0], y: value[1] };\r\n        }\r\n\r\n        this.uniforms.uCenter = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the velocity of the motion for blur effect on the `x` axis\r\n     * @default 0\r\n     */\r\n    get centerX(): number { return this.center.x; }\r\n    set centerX(value: number) { this.center.x = value; }\r\n\r\n    /**\r\n     * Sets the velocity of the motion for blur effect on the `x` axis\r\n     * @default 0\r\n     */\r\n    get centerY(): number { return this.center.y; }\r\n    set centerY(value: number) { this.center.y = value; }\r\n\r\n    /**\r\n     * The kernelSize of the blur filter. Must be odd number >= 3\r\n     * @default 5\r\n     */\r\n    get kernelSize(): number { return this._kernelSize; }\r\n    set kernelSize(value: number)\r\n    {\r\n        this._kernelSize = value;\r\n        this._updateKernelSize();\r\n    }\r\n\r\n    /**\r\n     * The maximum size of the blur radius, less than `0` equates to infinity\r\n     * @default -1\r\n     */\r\n    get radius(): number { return this.uniforms.uRadius; }\r\n    set radius(value: number) { this.uniforms.uRadius = value < 0 || value === Infinity ? -1 : value; }\r\n}\r\n"],"names":[],"mappings":"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"}