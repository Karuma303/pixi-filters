'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var source = "struct MultiColorReplaceUniforms {\r\n  uOriginalColors: array<vec3<f32>, MAX_COLORS>,\r\n  uTargetColors: array<vec3<f32>, MAX_COLORS>,\r\n  uTolerance:f32,\r\n};\r\n\r\n@group(0) @binding(1) var uTexture: texture_2d<f32>; \r\n@group(0) @binding(2) var uSampler: sampler;\r\n@group(1) @binding(0) var<uniform> multiColorReplaceUniforms : MultiColorReplaceUniforms;\r\n\r\n@fragment\r\nfn mainFragment(\r\n  @builtin(position) position: vec4<f32>,\r\n  @location(0) uv : vec2<f32>\r\n) -> @location(0) vec4<f32> {\r\n  let uOriginalColors = multiColorReplaceUniforms.uOriginalColors;\r\n  let uTargetColors = multiColorReplaceUniforms.uTargetColors;\r\n  let uTolerance = multiColorReplaceUniforms.uTolerance;\r\n\r\n  var color: vec4<f32> = textureSample(uTexture, uSampler, uv);\r\n\r\n  let alpha: f32 = color.a;\r\n\r\n  if (alpha > 0.0001)\r\n  {\r\n    var modColor: vec3<f32> = vec3<f32>(color.rgb) / alpha;\r\n\r\n    for(var i: i32 = 0; i < MAX_COLORS; i += 1)\r\n    {\r\n      let origColor: vec3<f32> = uOriginalColors[i];\r\n      if (origColor.r < 0.0)\r\n      {\r\n        break;\r\n      }\r\n      let colorDiff: vec3<f32> = origColor - modColor;\r\n      \r\n      if (length(colorDiff) < uTolerance)\r\n      {\r\n        let targetColor: vec3<f32> = uTargetColors[i];\r\n        color = vec4((targetColor + colorDiff) * alpha, alpha);\r\n        return color;\r\n      }\r\n    }\r\n  }\r\n\r\n  return color;\r\n}\r\n\r\nconst MAX_COLORS: i32 = ${MAX_COLORS};";

exports["default"] = source;
//# sourceMappingURL=multi-color-replace.js.map
