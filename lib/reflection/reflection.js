'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var fragment = "precision highp float;\r\nin vec2 vTextureCoord;\r\nout vec4 finalColor;\r\n\r\nuniform sampler2D uTexture;\r\nuniform float uMirror;\r\nuniform float uBoundary;\r\nuniform vec2 uAmplitude;\r\nuniform vec2 uWavelength;\r\nuniform vec2 uAlpha;\r\nuniform float uTime;\r\nuniform vec2 uDimensions;\r\n\r\nuniform vec4 uInputSize;\r\nuniform vec4 uInputClamp;\r\n\r\nfloat rand(vec2 co) {\r\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\r\n}\r\n\r\nvoid main(void)\r\n{\r\n    vec2 pixelCoord = vTextureCoord.xy * uInputSize.xy;\r\n    vec2 coord = pixelCoord / uDimensions;\r\n\r\n    if (coord.y < uBoundary) {\r\n        finalColor = texture(uTexture, vTextureCoord);\r\n        return;\r\n    }\r\n\r\n    float k = (coord.y - uBoundary) / (1. - uBoundary + 0.0001);\r\n    float areaY = uBoundary * uDimensions.y / uInputSize.y;\r\n    float v = areaY + areaY - vTextureCoord.y;\r\n    float y = uMirror > 0.5 ? v : vTextureCoord.y;\r\n\r\n    float _amplitude = ((uAmplitude.y - uAmplitude.x) * k + uAmplitude.x ) / uInputSize.x;\r\n    float _waveLength = ((uWavelength.y - uWavelength.x) * k + uWavelength.x) / uInputSize.y;\r\n    float _alpha = (uAlpha.y - uAlpha.x) * k + uAlpha.x;\r\n\r\n    float x = vTextureCoord.x + cos(v * 6.28 / _waveLength - uTime) * _amplitude;\r\n    x = clamp(x, uInputClamp.x, uInputClamp.z);\r\n\r\n    vec4 color = texture(uTexture, vec2(x, y));\r\n\r\n    finalColor = color * _alpha;\r\n}\r\n";

exports["default"] = fragment;
//# sourceMappingURL=reflection.js.map
