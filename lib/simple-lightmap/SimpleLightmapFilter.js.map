{"version":3,"file":"SimpleLightmapFilter.js","sources":["../../src/simple-lightmap/SimpleLightmapFilter.ts"],"sourcesContent":["import {\r\n    Color,\r\n    ColorSource,\r\n    deprecation,\r\n    Filter,\r\n    FilterSystem,\r\n    GlProgram,\r\n    GpuProgram,\r\n    RenderSurface,\r\n    Texture,\r\n} from 'pixi.js';\r\nimport { vertex, wgslVertex } from '../defaults';\r\nimport fragment from './simple-lightmap.frag';\r\nimport source from './simple-lightmap.wgsl';\r\n\r\ntype DeprecatedColor = number | number[];\r\n\r\n/** Options for the SimpleLightmapFilter constructor. */\r\nexport interface SimpleLightmapFilterOptions\r\n{\r\n    /** A texture where your lightmap is rendered */\r\n    lightMap: Texture;\r\n    /**\r\n     * The color value of the ambient color\r\n     * @example [1.0, 1.0, 1.0] = 0xffffff\r\n     * @default 0x000000\r\n     */\r\n    color?: ColorSource;\r\n    /**\r\n     * Coefficient for alpha multiplication\r\n     * @default 1\r\n     */\r\n    alpha?: number;\r\n}\r\n\r\n/**\r\n* SimpleLightmap, originally by Oza94\r\n* {@link http://www.html5gamedevs.com/topic/20027-pixijs-simple-lightmapping/}\r\n* {@link http://codepen.io/Oza94/pen/EPoRxj}\r\n*\r\n* You have to specify filterArea, or suffer consequences.\r\n* You may have to use it with `filter.dontFit = true`,\r\n*  until we rewrite this using same approach as for DisplacementFilter.\r\n*\r\n* ![original](../screenshots/original.png)![filter](../screenshots/simple-lightmap.png)\r\n* @class\r\n* @extends Filter\r\n* @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\r\n*\r\n* @example\r\n*  displayObject.filters = [new SimpleLightmapFilter(texture, 0x666666)];\r\n*/\r\nexport class SimpleLightmapFilter extends Filter\r\n{\r\n    /** Default values for options. */\r\n    public static readonly DEFAULT_OPTIONS: SimpleLightmapFilterOptions = {\r\n        lightMap: Texture.WHITE,\r\n        color: 0x000000,\r\n        alpha: 1\r\n    };\r\n\r\n    public uniforms: {\r\n        uColor: Float32Array;\r\n        uAlpha: number;\r\n        uDimensions: Float32Array;\r\n    };\r\n\r\n    private _color!: Color;\r\n    private _lightMap!: Texture;\r\n\r\n    /**\r\n     * @param options - Options for the SimpleLightmapFilter constructor.\r\n     */\r\n    constructor(options: SimpleLightmapFilterOptions);\r\n    /**\r\n     * @deprecated since 6.0.0\r\n     *\r\n     * @param {PIXI.Texture} texture - a texture where your lightmap is rendered\r\n     * @param {Array<number>|number} [color=0x000000] - An RGBA array of the ambient color\r\n     * @param {number} [alpha=1] - Default alpha set independent of color (if it's a number, not array).\r\n     */\r\n    constructor(texture: Texture, color?: DeprecatedColor, alpha?: number);\r\n    /** @ignore */\r\n    constructor(...args: [SimpleLightmapFilterOptions] | [Texture, DeprecatedColor?, number?])\r\n    {\r\n        let options = args[0] ?? {};\r\n\r\n        if (options instanceof Texture)\r\n        {\r\n            // eslint-disable-next-line max-len\r\n            deprecation('6.0.0', 'SimpleLightmapFilter constructor params are now options object. See params: { lightMap, color, alpha }');\r\n\r\n            options = { lightMap: options };\r\n\r\n            if (args[1] !== undefined) options.color = args[1];\r\n            if (args[2] !== undefined) options.alpha = args[2];\r\n        }\r\n\r\n        options = { ...SimpleLightmapFilter.DEFAULT_OPTIONS, ...options };\r\n\r\n        if (!options.lightMap) throw Error('No light map texture source was provided to SimpleLightmapFilter');\r\n\r\n        const gpuProgram = GpuProgram.from({\r\n            vertex: {\r\n                source: wgslVertex,\r\n                entryPoint: 'mainVertex',\r\n            },\r\n            fragment: {\r\n                source,\r\n                entryPoint: 'mainFragment',\r\n            },\r\n        });\r\n        const glProgram = GlProgram.from({\r\n            vertex,\r\n            fragment,\r\n            name: 'simple-lightmap-filter',\r\n        });\r\n\r\n        super({\r\n            gpuProgram,\r\n            glProgram,\r\n            resources: {\r\n                simpleLightmapUniforms: {\r\n                    uColor: { value: new Float32Array(3), type: 'vec3<f32>' },\r\n                    uAlpha: { value: options.alpha, type: 'f32' },\r\n                    uDimensions: { value: new Float32Array(2), type: 'vec2<f32>' },\r\n                },\r\n                uMapTexture: options.lightMap.source,\r\n                uMapSampler: options.lightMap.source.style,\r\n            },\r\n        });\r\n\r\n        this.uniforms = this.resources.simpleLightmapUniforms.uniforms;\r\n        this._color = new Color();\r\n        this.color = options.color ?? 0x000000;\r\n\r\n        Object.assign(this, options);\r\n    }\r\n\r\n    /**\r\n     * Override existing apply method in `Filter`\r\n     * @override\r\n     * @ignore\r\n     */\r\n    public override apply(\r\n        filterManager: FilterSystem,\r\n        input: Texture,\r\n        output: RenderSurface,\r\n        clearMode: boolean,\r\n    ): void\r\n    {\r\n        this.uniforms.uDimensions[0] = input.frame.width;\r\n        this.uniforms.uDimensions[1] = input.frame.height;\r\n\r\n        // draw the filter...\r\n        filterManager.applyFilter(this, input, output, clearMode);\r\n    }\r\n\r\n    /** A sprite where your lightmap is rendered */\r\n    get lightMap(): Texture { return this._lightMap; }\r\n    set lightMap(value: Texture)\r\n    {\r\n        this._lightMap = value;\r\n        this.resources.uMapTexture = value.source;\r\n        this.resources.uMapSampler = value.source.style;\r\n    }\r\n\r\n    /**\r\n     * The color value of the ambient color\r\n     * @example [1.0, 1.0, 1.0] = 0xffffff\r\n     * @default 0x000000\r\n     */\r\n    get color(): ColorSource { return this._color.value as ColorSource; }\r\n    set color(value: ColorSource)\r\n    {\r\n        this._color.setValue(value);\r\n        const [r, g, b] = this._color.toArray();\r\n\r\n        this.uniforms.uColor[0] = r;\r\n        this.uniforms.uColor[1] = g;\r\n        this.uniforms.uColor[2] = b;\r\n    }\r\n\r\n    /**\r\n     * Coefficient for alpha multiplication\r\n     * @default 1\r\n     */\r\n    get alpha(): number { return this.uniforms.uAlpha; }\r\n    set alpha(value: number) { this.uniforms.uAlpha = value; }\r\n}\r\n"],"names":["Filter","Texture","deprecation","GpuProgram","wgslVertex","source","GlProgram","vertex","fragment","Color"],"mappings":"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"}