var source = "struct SimpleLightmapUniforms {\r\n  uColor: vec3<f32>,\r\n  uAlpha: f32,\r\n  uDimensions: vec2<f32>,\r\n};\r\n\r\nstruct GlobalFilterUniforms {\r\n  uInputSize:vec4<f32>,\r\n  uInputPixel:vec4<f32>,\r\n  uInputClamp:vec4<f32>,\r\n  uOutputFrame:vec4<f32>,\r\n  uGlobalFrame:vec4<f32>,\r\n  uOutputTexture:vec4<f32>,\r\n};\r\n\r\n@group(0) @binding(0) var<uniform> gfu: GlobalFilterUniforms;\r\n\r\n@group(0) @binding(1) var uTexture: texture_2d<f32>; \r\n@group(0) @binding(2) var uSampler: sampler;\r\n@group(1) @binding(0) var<uniform> simpleLightmapUniforms : SimpleLightmapUniforms;\r\n@group(1) @binding(1) var uMapTexture: texture_2d<f32>;\r\n@group(1) @binding(2) var uMapSampler: sampler;\r\n\r\n@fragment\r\nfn mainFragment(\r\n  @builtin(position) position: vec4<f32>,\r\n  @location(0) uv : vec2<f32>,\r\n) -> @location(0) vec4<f32> {\r\n  let uColor = simpleLightmapUniforms.uColor;\r\n  let uAlpha = simpleLightmapUniforms.uAlpha;\r\n  let uDimensions = simpleLightmapUniforms.uDimensions;\r\n\r\n  let diffuseColor: vec4<f32> = textureSample(uTexture, uSampler, uv);\r\n  let lightCoord: vec2<f32> = (uv * gfu.uInputSize.xy) / simpleLightmapUniforms.uDimensions;\r\n  let light: vec4<f32> = textureSample(uMapTexture, uMapSampler, lightCoord);\r\n  let ambient: vec3<f32> = uColor * uAlpha;\r\n  let intensity: vec3<f32> = ambient + light.rgb;\r\n  let finalColor: vec3<f32> = diffuseColor.rgb * intensity;\r\n  return vec4<f32>(finalColor, diffuseColor.a);\r\n}";

export { source as default };
//# sourceMappingURL=simple-lightmap.mjs.map
