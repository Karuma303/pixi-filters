'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var fragment = "precision highp float;\r\nin vec2 vTextureCoord;\r\nout vec4 finalColor;\r\n\r\nuniform sampler2D uTexture;\r\nuniform vec4 uLine;\r\nuniform vec2 uNoise;\r\nuniform vec3 uVignette;\r\nuniform float uSeed;\r\nuniform float uTime;\r\nuniform vec2 uDimensions;\r\n\r\nuniform vec4 uInputSize;\r\n\r\nconst float SQRT_2 = 1.414213;\r\n\r\nfloat rand(vec2 co) {\r\n    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\r\n}\r\n\r\nfloat vignette(vec3 co, vec2 coord)\r\n{\r\n    float outter = SQRT_2 - uVignette[0] * SQRT_2;\r\n    vec2 dir = vec2(0.5) - coord;\r\n    dir.y *= uDimensions.y / uDimensions.x;\r\n    float darker = clamp((outter - length(dir) * SQRT_2) / ( 0.00001 + uVignette[2] * SQRT_2), 0.0, 1.0);\r\n    return darker + (1.0 - darker) * (1.0 - uVignette[1]);\r\n}\r\n\r\nfloat noise(vec2 coord)\r\n{\r\n    vec2 pixelCoord = coord * uInputSize.xy;\r\n    pixelCoord.x = floor(pixelCoord.x / uNoise[1]);\r\n    pixelCoord.y = floor(pixelCoord.y / uNoise[1]);\r\n    return (rand(pixelCoord * uNoise[1] * uSeed) - 0.5) * uNoise[0];\r\n}\r\n\r\nvec3 interlaceLines(vec3 co, vec2 coord)\r\n{\r\n    vec3 color = co;\r\n\r\n    float curvature = uLine[0];\r\n    float lineWidth = uLine[1];\r\n    float lineContrast = uLine[2];\r\n    float verticalLine = uLine[3];\r\n\r\n    vec2 dir = vec2(coord * uInputSize.xy / uDimensions - 0.5);\r\n\r\n    float _c = curvature > 0. ? curvature : 1.;\r\n    float k = curvature > 0. ? (length(dir * dir) * 0.25 * _c * _c + 0.935 * _c) : 1.;\r\n    vec2 uv = dir * k;\r\n    float v = verticalLine > 0.5 ? uv.x * uDimensions.x : uv.y * uDimensions.y;\r\n    v *= min(1.0, 2.0 / lineWidth ) / _c;\r\n    float j = 1. + cos(v * 1.2 - uTime) * 0.5 * lineContrast;\r\n    color *= j;\r\n\r\n    float segment = verticalLine > 0.5 ? mod((dir.x + .5) * uDimensions.x, 4.) : mod((dir.y + .5) * uDimensions.y, 4.);\r\n    color *= 0.99 + ceil(segment) * 0.015;\r\n\r\n    return color;\r\n}\r\n\r\nvoid main(void)\r\n{\r\n    finalColor = texture(uTexture, vTextureCoord);\r\n    vec2 coord = vTextureCoord * uInputSize.xy / uDimensions;\r\n\r\n    if (uNoise[0] > 0.0 && uNoise[1] > 0.0)\r\n    {\r\n        float n = noise(vTextureCoord);\r\n        finalColor += vec4(n, n, n, finalColor.a);\r\n    }\r\n\r\n    if (uVignette[0] > 0.)\r\n    {\r\n        float v = vignette(finalColor.rgb, coord);\r\n        finalColor *= vec4(v, v, v, finalColor.a);\r\n    }\r\n\r\n    if (uLine[1] > 0.0)\r\n    {\r\n        finalColor = vec4(interlaceLines(finalColor.rgb, vTextureCoord), finalColor.a);  \r\n    }\r\n}\r\n";

exports["default"] = fragment;
//# sourceMappingURL=crt2.js.map
