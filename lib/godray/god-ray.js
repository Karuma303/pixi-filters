'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var source = "struct GodrayUniforms {\r\n  uLight: vec2<f32>,\r\n  uParallel: f32,\r\n  uAspect: f32,\r\n  uTime: f32,\r\n  uRay: vec3<f32>,\r\n  uDimensions: vec2<f32>,\r\n};\r\n\r\nstruct GlobalFilterUniforms {\r\n  uInputSize:vec4<f32>,\r\n  uInputPixel:vec4<f32>,\r\n  uInputClamp:vec4<f32>,\r\n  uOutputFrame:vec4<f32>,\r\n  uGlobalFrame:vec4<f32>,\r\n  uOutputTexture:vec4<f32>,\r\n};\r\n\r\n@group(0) @binding(0) var<uniform> gfu: GlobalFilterUniforms;\r\n\r\n@group(0) @binding(1) var uTexture: texture_2d<f32>; \r\n@group(0) @binding(2) var uSampler: sampler;\r\n@group(1) @binding(0) var<uniform> godrayUniforms : GodrayUniforms;\r\n\r\n@fragment\r\nfn mainFragment(\r\n  @builtin(position) position: vec4<f32>,\r\n  @location(0) uv : vec2<f32>\r\n) -> @location(0) vec4<f32> {\r\n  let uDimensions: vec2<f32> = godrayUniforms.uDimensions;\r\n  let uParallel: bool = godrayUniforms.uParallel > 0.5;\r\n  let uLight: vec2<f32> = godrayUniforms.uLight;\r\n  let uAspect: f32 = godrayUniforms.uAspect;\r\n\r\n  let coord: vec2<f32> = uv * gfu.uInputSize.xy / uDimensions;\r\n\r\n  var d: f32;\r\n\r\n  if (uParallel) {\r\n    let _cos: f32 = uLight.x;\r\n    let _sin: f32 = uLight.y;\r\n    d = (_cos * coord.x) + (_sin * coord.y * uAspect);\r\n  } else {\r\n    let dx: f32 = coord.x - uLight.x / uDimensions.x;\r\n    let dy: f32 = (coord.y - uLight.y / uDimensions.y) * uAspect;\r\n    let dis: f32 = sqrt(dx * dx + dy * dy) + 0.00001;\r\n    d = dy / dis;\r\n  }\r\n\r\n  let uTime: f32 = godrayUniforms.uTime;\r\n  let uRay: vec3<f32> = godrayUniforms.uRay;\r\n  \r\n  let gain = uRay[0];\r\n  let lacunarity = uRay[1];\r\n  let alpha = uRay[2];\r\n\r\n  let dir: vec3<f32> = vec3<f32>(d, d, 0.0);\r\n  var noise: f32 = turb(dir + vec3<f32>(uTime, 0.0, 62.1 + uTime) * 0.05, vec3<f32>(480.0, 320.0, 480.0), lacunarity, gain);\r\n  noise = mix(noise, 0.0, 0.3);\r\n  //fade vertically.\r\n  var mist: vec4<f32> = vec4<f32>(vec3<f32>(noise), 1.0) * (1.0 - coord.y);\r\n  mist.a = 1.0;\r\n  // apply user alpha\r\n  mist *= alpha;\r\n  return textureSample(uTexture, uSampler, uv) + mist;\r\n}\r\n\r\n${PERLIN}";

exports["default"] = source;
//# sourceMappingURL=god-ray.js.map
