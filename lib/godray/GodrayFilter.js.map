{"version":3,"file":"GodrayFilter.js","sources":["../../src/godray/GodrayFilter.ts"],"sourcesContent":["import { DEG_TO_RAD, Filter, GlProgram, GpuProgram } from 'pixi.js';\r\nimport { vertex, wgslVertex } from '../defaults';\r\nimport fragment from './god-ray.frag';\r\nimport source from './god-ray.wgsl';\r\nimport perlin from './perlin.frag';\r\nimport sourcePerlin from './perlin.wgsl';\r\n\r\nimport type { FilterSystem, PointData, RenderSurface, Texture } from 'pixi.js';\r\n\r\n/** Options for the GodrayFilter constructor. */\r\nexport interface GodrayFilterOptions\r\n{\r\n    /**\r\n     * The angle/light-source of the rays in degrees. For instance,\r\n     * a value of 0 is vertical rays, values of 90 or -90 produce horizontal rays.\r\n     * @default 30\r\n     */\r\n    angle?: number;\r\n    /**\r\n     * `true` if light rays are parallel (uses angle), `false` to use the focal `center` point\r\n     * @default true\r\n     */\r\n    parallel?: boolean;\r\n    /**\r\n     * Focal point for non-parallel rays, to use this `parallel` must be set to `false`.\r\n     * This should be a size 2 array or an object containing `x` and `y` values, you cannot change types\r\n     * once defined in the constructor\r\n     * @default {x:0,y:0}\r\n     */\r\n    center?: PointData | number[];\r\n    /**\r\n     * General intensity of the effect. A value closer to 1 will produce a more intense effect,\r\n     * where a value closer to 0 will produce a subtler effect.\r\n     * @default 0.5\r\n     */\r\n    gain?: number;\r\n    /**\r\n     * The density of the fractal noise\r\n     * @default 2.5\r\n     */\r\n    lacunarity?: number;\r\n    /**\r\n     * The current time position\r\n     * @default 0\r\n     */\r\n    time?: number;\r\n    /**\r\n     * The alpha (opacity) of the rays.  0 is fully transparent, 1 is fully opaque.\r\n     * @default 1\r\n     */\r\n    alpha?: number;\r\n}\r\n\r\n/**\r\n * GordayFilter, {@link https://codepen.io/alaingalvan originally} by Alain Galvan\r\n *\r\n *\r\n *\r\n * ![original](../screenshots/original.png)![filter](../screenshots/godray.gif)\r\n * @class\r\n * @extends Filter\r\n *\r\n * @example\r\n *  displayObject.filters = [new GodrayFilter()];\r\n */\r\nexport class GodrayFilter extends Filter\r\n{\r\n    /** Default values for options. */\r\n    public static readonly DEFAULT_OPTIONS: GodrayFilterOptions = {\r\n        angle: 30,\r\n        gain: 0.5,\r\n        lacunarity: 2.5,\r\n        parallel: true,\r\n        time: 0,\r\n        center: { x: 0, y: 0 },\r\n        alpha: 1,\r\n    };\r\n\r\n    public uniforms: {\r\n        uLight: Float32Array;\r\n        uParallel: number;\r\n        uAspect: number;\r\n        uTime: number;\r\n        uRay: Float32Array;\r\n        uDimensions: Float32Array;\r\n    };\r\n\r\n    /**\r\n     * The current time position\r\n     * @default 0\r\n     */\r\n    public time = 0;\r\n\r\n    private _angleLight: [number, number] = [0, 0];\r\n    private _angle = 0;\r\n    private _center!: PointData;\r\n\r\n    /**\r\n     * @param options - Options for the GodrayFilter constructor.\r\n     */\r\n    constructor(options?: GodrayFilterOptions)\r\n    {\r\n        options = { ...GodrayFilter.DEFAULT_OPTIONS, ...options };\r\n\r\n        const gpuProgram = GpuProgram.from({\r\n            vertex: {\r\n                source: wgslVertex,\r\n                entryPoint: 'mainVertex',\r\n            },\r\n            fragment: {\r\n                source: source.replace('${PERLIN}', sourcePerlin),\r\n                entryPoint: 'mainFragment',\r\n            },\r\n        });\r\n        const glProgram = GlProgram.from({\r\n            vertex,\r\n            fragment: fragment.replace('${PERLIN}', perlin),\r\n            name: 'god-ray-filter',\r\n        });\r\n\r\n        super({\r\n            gpuProgram,\r\n            glProgram,\r\n            resources: {\r\n                godrayUniforms: {\r\n                    uLight: { value: new Float32Array(2), type: 'vec2<f32>' },\r\n                    uParallel: { value: 0, type: 'f32' },\r\n                    uAspect: { value: 0, type: 'f32' },\r\n                    uTime: { value: options.time, type: 'f32' },\r\n                    uRay: { value: new Float32Array(3), type: 'vec3<f32>' },\r\n                    uDimensions: { value: new Float32Array(2), type: 'vec2<f32>' },\r\n                }\r\n            },\r\n        });\r\n\r\n        this.uniforms = this.resources.godrayUniforms.uniforms;\r\n\r\n        Object.assign(this, options);\r\n    }\r\n\r\n    /**\r\n     * Override existing apply method in Filter\r\n     * @override\r\n     * @ignore\r\n     */\r\n    public override apply(\r\n        filterManager: FilterSystem,\r\n        input: Texture,\r\n        output: RenderSurface,\r\n        clearMode: boolean\r\n    ): void\r\n    {\r\n        const width = input.frame.width;\r\n        const height = input.frame.height;\r\n\r\n        this.uniforms.uLight[0] = this.parallel ? this._angleLight[0] : this._center.x;\r\n        this.uniforms.uLight[1] = this.parallel ? this._angleLight[1] : this._center.y;\r\n        this.uniforms.uDimensions[0] = width;\r\n        this.uniforms.uDimensions[1] = height;\r\n        this.uniforms.uAspect = height / width;\r\n        this.uniforms.uTime = this.time;\r\n\r\n        // draw the filter...\r\n        filterManager.applyFilter(this, input, output, clearMode);\r\n    }\r\n\r\n    /**\r\n     * The angle/light-source of the rays in degrees. For instance,\r\n     * a value of 0 is vertical rays, values of 90 or -90 produce horizontal rays\r\n     * @default 30\r\n     */\r\n    get angle(): number { return this._angle; }\r\n    set angle(value: number)\r\n    {\r\n        this._angle = value;\r\n\r\n        const radians = value * DEG_TO_RAD;\r\n\r\n        this._angleLight[0] = Math.cos(radians);\r\n        this._angleLight[1] = Math.sin(radians);\r\n    }\r\n\r\n    /**\r\n     * `true` if light rays are parallel (uses angle), `false` to use the focal `center` point\r\n     * @default true\r\n     */\r\n    get parallel(): boolean { return this.uniforms.uParallel > 0.5; }\r\n    set parallel(value: boolean) { this.uniforms.uParallel = value ? 1 : 0; }\r\n\r\n    /**\r\n     * Focal point for non-parallel rays, to use this `parallel` must be set to `false`.\r\n     * @default {x:0,y:0}\r\n     */\r\n    get center(): PointData { return this._center; }\r\n    set center(value: PointData | number[])\r\n    {\r\n        if (Array.isArray(value))\r\n        {\r\n            value = { x: value[0], y: value[1] };\r\n        }\r\n\r\n        this._center = value;\r\n    }\r\n\r\n    /**\r\n     * Focal point for non-parallel rays on the `x` axis, to use this `parallel` must be set to `false`.\r\n     * @default 0\r\n     */\r\n    get centerX(): number { return this.center.x; }\r\n    set centerX(value: number) { this.center.x = value; }\r\n\r\n    /**\r\n     * Focal point for non-parallel rays on the `y` axis, to use this `parallel` must be set to `false`.\r\n     * @default 0\r\n     */\r\n    get centerY(): number { return this.center.y; }\r\n    set centerY(value: number) { this.center.y = value; }\r\n\r\n    /**\r\n     * General intensity of the effect. A value closer to 1 will produce a more intense effect,\r\n     * where a value closer to 0 will produce a subtler effect\r\n     * @default 0.5\r\n     */\r\n    get gain(): number { return this.uniforms.uRay[0]; }\r\n    set gain(value: number) { this.uniforms.uRay[0] = value; }\r\n\r\n    /**\r\n     * The density of the fractal noise.\r\n     * A higher amount produces more rays and a smaller amount produces fewer waves\r\n     * @default 2.5\r\n     */\r\n    get lacunarity(): number { return this.uniforms.uRay[1]; }\r\n    set lacunarity(value: number) { this.uniforms.uRay[1] = value; }\r\n\r\n    /**\r\n     * The alpha (opacity) of the rays.  0 is fully transparent, 1 is fully opaque.\r\n     * @default 1\r\n     */\r\n    get alpha(): number { return this.uniforms.uRay[2]; }\r\n    set alpha(value: number) { this.uniforms.uRay[2] = value; }\r\n}\r\n"],"names":["Filter","GpuProgram","wgslVertex","source","sourcePerlin","GlProgram","vertex","fragment","perlin","DEG_TO_RAD"],"mappings":"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"}