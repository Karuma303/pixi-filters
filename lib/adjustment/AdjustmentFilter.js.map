{"version":3,"file":"AdjustmentFilter.js","sources":["../../src/adjustment/AdjustmentFilter.ts"],"sourcesContent":["import { Filter, GlProgram, GpuProgram } from 'pixi.js';\r\nimport { vertex, wgslVertex } from '../defaults';\r\nimport fragment from './adjustment.frag';\r\nimport source from './adjustment.wgsl';\r\n\r\n/** Options for the AdjustmentFilter constructor */\r\nexport interface AdjustmentFilterOptions\r\n{\r\n    /**\r\n     * The amount of luminance\r\n     * @default 1\r\n     */\r\n    gamma?: number;\r\n    /**\r\n     * The amount of contrast\r\n     * @default 1\r\n     */\r\n    contrast?: number;\r\n    /**\r\n     * The amount of color saturation\r\n     * @default 1\r\n     */\r\n    saturation?: number;\r\n    /**\r\n     * The overall brightness\r\n     * @default 1\r\n     */\r\n    brightness?: number;\r\n    /**\r\n     * The multiplied red channel\r\n     * @default 1\r\n     */\r\n    red?: number;\r\n    /**\r\n     * The multiplied green channel\r\n     * @default 1\r\n     */\r\n    green?: number;\r\n    /**\r\n     * The multiplied blue channel\r\n     * @default 1\r\n     */\r\n    blue?: number;\r\n    /**\r\n     * The overall alpha channel\r\n     * @default 1\r\n     */\r\n    alpha?: number;\r\n}\r\n\r\n/**\r\n * The ability to adjust gamma, contrast, saturation, brightness, alpha or color-channel shift.\r\n * This is a faster and much simpler to use than\r\n * {@link http://pixijs.download/release/docs/ColorMatrixFilter.html ColorMatrixFilter}\r\n * because it does not use a matrix.<br>\r\n * ![original](../screenshots/original.png)![filter](../screenshots/adjustment.png)\r\n *\r\n * @class\r\n * @extends Filter\r\n */\r\nexport class AdjustmentFilter extends Filter\r\n{\r\n    /** Default values for options. */\r\n    public static readonly DEFAULT_OPTIONS: AdjustmentFilterOptions = {\r\n        gamma: 1,\r\n        contrast: 1,\r\n        saturation: 1,\r\n        brightness: 1,\r\n        red: 1,\r\n        green: 1,\r\n        blue: 1,\r\n        alpha: 1,\r\n    };\r\n\r\n    public uniforms: {\r\n        uGamma: number;\r\n        uContrast: number;\r\n        uSaturation: number;\r\n        uBrightness: number;\r\n        uColor: Float32Array;\r\n    };\r\n\r\n    /**\r\n     * @param options - The options of the adjustment filter.\r\n     */\r\n    constructor(options?: AdjustmentFilterOptions)\r\n    {\r\n        options = { ...AdjustmentFilter.DEFAULT_OPTIONS, ...options };\r\n\r\n        const gpuProgram = GpuProgram.from({\r\n            vertex: {\r\n                source: wgslVertex,\r\n                entryPoint: 'mainVertex',\r\n            },\r\n            fragment: {\r\n                source,\r\n                entryPoint: 'mainFragment',\r\n            },\r\n        });\r\n\r\n        const glProgram = GlProgram.from({\r\n            vertex,\r\n            fragment,\r\n            name: 'adjustment-filter'\r\n        });\r\n\r\n        super({\r\n            gpuProgram,\r\n            glProgram,\r\n            resources: {\r\n                adjustmentUniforms: {\r\n                    uGamma: { value: options.gamma, type: 'f32' },\r\n                    uContrast: { value: options.contrast, type: 'f32' },\r\n                    uSaturation: { value: options.saturation, type: 'f32' },\r\n                    uBrightness: { value: options.brightness, type: 'f32' },\r\n                    uColor: {\r\n                        value: [\r\n                            options.red,\r\n                            options.green,\r\n                            options.blue,\r\n                            options.alpha,\r\n                        ],\r\n                        type: 'vec4<f32>',\r\n                    },\r\n                }\r\n            },\r\n        });\r\n\r\n        this.uniforms = this.resources.adjustmentUniforms.uniforms;\r\n    }\r\n\r\n    /**\r\n     * Amount of luminance\r\n     * @default 1\r\n     */\r\n    get gamma(): number { return this.uniforms.uGamma; }\r\n    set gamma(value: number) { this.uniforms.uGamma = value; }\r\n\r\n    /**\r\n     * Amount of contrast\r\n     * @default 1\r\n     */\r\n    get contrast(): number { return this.uniforms.uContrast; }\r\n    set contrast(value: number) { this.uniforms.uContrast = value; }\r\n\r\n    /**\r\n     * Amount of color saturation\r\n     * @default 1\r\n     */\r\n    get saturation(): number { return this.uniforms.uSaturation; }\r\n    set saturation(value: number) { this.uniforms.uSaturation = value; }\r\n\r\n    /**\r\n     * The overall brightness\r\n     * @default 1\r\n     */\r\n    get brightness(): number { return this.uniforms.uBrightness; }\r\n    set brightness(value: number) { this.uniforms.uBrightness = value; }\r\n\r\n    /**\r\n     * The multiplied red channel\r\n     * @default 1\r\n     */\r\n    get red(): number { return this.uniforms.uColor[0]; }\r\n    set red(value: number) { this.uniforms.uColor[0] = value; }\r\n\r\n    /**\r\n     * The multiplied blue channel\r\n     * @default 1\r\n     */\r\n    get green(): number { return this.uniforms.uColor[1]; }\r\n    set green(value: number) { this.uniforms.uColor[1] = value; }\r\n\r\n    /**\r\n     * The multiplied green channel\r\n     * @default 1\r\n     */\r\n    get blue(): number { return this.uniforms.uColor[2]; }\r\n    set blue(value: number) { this.uniforms.uColor[2] = value; }\r\n\r\n    /**\r\n     * The overall alpha channel\r\n     * @default 1\r\n     */\r\n    get alpha(): number { return this.uniforms.uColor[3]; }\r\n    set alpha(value: number) { this.uniforms.uColor[3] = value; }\r\n}\r\n"],"names":["Filter","GpuProgram","wgslVertex","source","GlProgram","vertex","fragment"],"mappings":";;;;;;;;;;;;;;;;AA4DO,MAAM,iBAAA,GAAN,MAAM,iBAAA,SAAyBA,cACtC,CAAA;AAAA;AAAA;AAAA;AAAA,EAwBI,YAAY,OACZ,EAAA;AACI,IAAA,OAAA,GAAU,EAAE,GAAG,iBAAiB,CAAA,eAAA,EAAiB,GAAG,OAAQ,EAAA,CAAA;AAE5D,IAAM,MAAA,UAAA,GAAaC,mBAAW,IAAK,CAAA;AAAA,MAC/B,MAAQ,EAAA;AAAA,QACJ,MAAQ,EAAAC,mBAAA;AAAA,QACR,UAAY,EAAA,YAAA;AAAA,OAChB;AAAA,MACA,QAAU,EAAA;AAAA,gBACNC,qBAAA;AAAA,QACA,UAAY,EAAA,cAAA;AAAA,OAChB;AAAA,KACH,CAAA,CAAA;AAED,IAAM,MAAA,SAAA,GAAYC,kBAAU,IAAK,CAAA;AAAA,cAC7BC,qBAAA;AAAA,gBACAC,uBAAA;AAAA,MACA,IAAM,EAAA,mBAAA;AAAA,KACT,CAAA,CAAA;AAED,IAAM,KAAA,CAAA;AAAA,MACF,UAAA;AAAA,MACA,SAAA;AAAA,MACA,SAAW,EAAA;AAAA,QACP,kBAAoB,EAAA;AAAA,UAChB,QAAQ,EAAE,KAAA,EAAO,OAAQ,CAAA,KAAA,EAAO,MAAM,KAAM,EAAA;AAAA,UAC5C,WAAW,EAAE,KAAA,EAAO,OAAQ,CAAA,QAAA,EAAU,MAAM,KAAM,EAAA;AAAA,UAClD,aAAa,EAAE,KAAA,EAAO,OAAQ,CAAA,UAAA,EAAY,MAAM,KAAM,EAAA;AAAA,UACtD,aAAa,EAAE,KAAA,EAAO,OAAQ,CAAA,UAAA,EAAY,MAAM,KAAM,EAAA;AAAA,UACtD,MAAQ,EAAA;AAAA,YACJ,KAAO,EAAA;AAAA,cACH,OAAQ,CAAA,GAAA;AAAA,cACR,OAAQ,CAAA,KAAA;AAAA,cACR,OAAQ,CAAA,IAAA;AAAA,cACR,OAAQ,CAAA,KAAA;AAAA,aACZ;AAAA,YACA,IAAM,EAAA,WAAA;AAAA,WACV;AAAA,SACJ;AAAA,OACJ;AAAA,KACH,CAAA,CAAA;AApDL,IAAO,aAAA,CAAA,IAAA,EAAA,UAAA,CAAA,CAAA;AAsDH,IAAK,IAAA,CAAA,QAAA,GAAW,IAAK,CAAA,SAAA,CAAU,kBAAmB,CAAA,QAAA,CAAA;AAAA,GACtD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,KAAgB,GAAA;AAAE,IAAA,OAAO,KAAK,QAAS,CAAA,MAAA,CAAA;AAAA,GAAQ;AAAA,EACnD,IAAI,MAAM,KAAe,EAAA;AAAE,IAAA,IAAA,CAAK,SAAS,MAAS,GAAA,KAAA,CAAA;AAAA,GAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAMzD,IAAI,QAAmB,GAAA;AAAE,IAAA,OAAO,KAAK,QAAS,CAAA,SAAA,CAAA;AAAA,GAAW;AAAA,EACzD,IAAI,SAAS,KAAe,EAAA;AAAE,IAAA,IAAA,CAAK,SAAS,SAAY,GAAA,KAAA,CAAA;AAAA,GAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAM/D,IAAI,UAAqB,GAAA;AAAE,IAAA,OAAO,KAAK,QAAS,CAAA,WAAA,CAAA;AAAA,GAAa;AAAA,EAC7D,IAAI,WAAW,KAAe,EAAA;AAAE,IAAA,IAAA,CAAK,SAAS,WAAc,GAAA,KAAA,CAAA;AAAA,GAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAMnE,IAAI,UAAqB,GAAA;AAAE,IAAA,OAAO,KAAK,QAAS,CAAA,WAAA,CAAA;AAAA,GAAa;AAAA,EAC7D,IAAI,WAAW,KAAe,EAAA;AAAE,IAAA,IAAA,CAAK,SAAS,WAAc,GAAA,KAAA,CAAA;AAAA,GAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAMnE,IAAI,GAAc,GAAA;AAAE,IAAO,OAAA,IAAA,CAAK,QAAS,CAAA,MAAA,CAAO,CAAC,CAAA,CAAA;AAAA,GAAG;AAAA,EACpD,IAAI,IAAI,KAAe,EAAA;AAAE,IAAK,IAAA,CAAA,QAAA,CAAS,MAAO,CAAA,CAAC,CAAI,GAAA,KAAA,CAAA;AAAA,GAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAM1D,IAAI,KAAgB,GAAA;AAAE,IAAO,OAAA,IAAA,CAAK,QAAS,CAAA,MAAA,CAAO,CAAC,CAAA,CAAA;AAAA,GAAG;AAAA,EACtD,IAAI,MAAM,KAAe,EAAA;AAAE,IAAK,IAAA,CAAA,QAAA,CAAS,MAAO,CAAA,CAAC,CAAI,GAAA,KAAA,CAAA;AAAA,GAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAM5D,IAAI,IAAe,GAAA;AAAE,IAAO,OAAA,IAAA,CAAK,QAAS,CAAA,MAAA,CAAO,CAAC,CAAA,CAAA;AAAA,GAAG;AAAA,EACrD,IAAI,KAAK,KAAe,EAAA;AAAE,IAAK,IAAA,CAAA,QAAA,CAAS,MAAO,CAAA,CAAC,CAAI,GAAA,KAAA,CAAA;AAAA,GAAO;AAAA;AAAA;AAAA;AAAA;AAAA,EAM3D,IAAI,KAAgB,GAAA;AAAE,IAAO,OAAA,IAAA,CAAK,QAAS,CAAA,MAAA,CAAO,CAAC,CAAA,CAAA;AAAA,GAAG;AAAA,EACtD,IAAI,MAAM,KAAe,EAAA;AAAE,IAAK,IAAA,CAAA,QAAA,CAAS,MAAO,CAAA,CAAC,CAAI,GAAA,KAAA,CAAA;AAAA,GAAO;AAChE,CAAA,CAAA;AAAA;AA3HI,aAAA,CAHS,mBAGc,iBAA2C,EAAA;AAAA,EAC9D,KAAO,EAAA,CAAA;AAAA,EACP,QAAU,EAAA,CAAA;AAAA,EACV,UAAY,EAAA,CAAA;AAAA,EACZ,UAAY,EAAA,CAAA;AAAA,EACZ,GAAK,EAAA,CAAA;AAAA,EACL,KAAO,EAAA,CAAA;AAAA,EACP,IAAM,EAAA,CAAA;AAAA,EACN,KAAO,EAAA,CAAA;AACX,CAAA,CAAA,CAAA;AAZG,IAAM,gBAAN,GAAA;;;;"}